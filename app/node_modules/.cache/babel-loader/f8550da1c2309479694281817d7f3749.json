{"ast":null,"code":"/**\n * @hidden\n */\nexport var ResultType;\n\n(function (ResultType) {\n  ResultType[ResultType[\"Literal\"] = 0] = \"Literal\";\n  ResultType[ResultType[\"Mask\"] = 1] = \"Mask\";\n  ResultType[ResultType[\"Undefined\"] = 2] = \"Undefined\";\n})(ResultType || (ResultType = {}));\n/**\n * @hidden\n */\n\n\nvar Result =\n/** @class */\nfunction () {\n  function Result(value, rest, type) {\n    if (type === void 0) {\n      type = ResultType.Undefined;\n    }\n\n    this.value = value;\n    this.rest = rest;\n    this.type = type;\n  } // map :: Functor f => f a ~> (a -> b) -> f b\n\n\n  Result.prototype.map = function (fn) {\n    return new Result(fn(this.value), this.rest);\n  }; // chain :: Chain m => m a ~> (a -> m b) -> m b\n\n\n  Result.prototype.chain = function (fn) {\n    return fn(this.value, this.rest);\n  };\n\n  Result.prototype.fold = function (s, _\n  /*we don't need it*/\n  ) {\n    return s(this.value, this.rest);\n  };\n\n  Result.prototype.concat = function (r) {\n    return this.map(function (vs, _) {\n      return r.chain(function (v, __) {\n        return vs.concat([v]);\n      });\n    });\n  };\n\n  Result.prototype.toString = function () {\n    return \"Result({ value: '\" + this.value + \"', rest: \" + this.rest + \" })\";\n  };\n\n  return Result;\n}();\n\nexport { Result };","map":null,"metadata":{},"sourceType":"module"}