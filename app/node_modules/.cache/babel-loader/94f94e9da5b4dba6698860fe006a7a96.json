{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as PropTypes from 'prop-types';\nimport { dispatchEvent } from '@progress/kendo-react-common';\nimport { GridSelectionCell } from './cells/GridSelectionCell';\nimport { GridHierarchyCell } from './cells/GridHierarchyCell';\nimport { GridEditCell } from './cells/GridEditCell';\nimport { Header } from './header/Header';\nimport { HeaderRow } from './header/HeaderRow';\nimport { FilterRow } from './header/FilterRow';\nimport { GroupPanel } from './header/GroupPanel';\nimport { Pager } from './paging/Pager';\nimport { VirtualScroll } from './VirtualScroll';\nimport { ColumnResize } from './drag/ColumnResize';\nimport { CommonDragLogic } from './drag/CommonDragLogic';\nimport { DragClue } from './drag/DragClue';\nimport { DropClue } from './drag/DropClue';\nimport { getNestedValue, flatData, mapColumns, readColumns, autoGenerateColumns } from './utils/index';\nimport { GridCell } from './cells/GridCell';\nimport { GridGroupCell } from './cells/GridGroupCell';\nimport { GridRow } from './rows/GridRow';\nimport { GridHeaderSelectionCell } from './header/GridHeaderSelectionCell';\nimport { GridNoRecords } from './GridNoRecords';\n/**\n * Represents the [KendoReact component]({% slug overview_grid %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *    constructor(props) {\n *        super(props);\n *        this.state = {\n *            data: [\n *                { 'foo': 'A1', 'bar': 'B1' },\n *                { 'foo': 'A2', 'bar': 'B2' },\n *                { 'foo': 'A3', 'bar': 'B2' }\n *            ]\n *        };\n *    }\n *    render() {\n *        return (\n *            <Grid\n *                data={this.state.data}\n *                reorderable={true}\n *            >\n *                <GridColumn field=\"foo\" />\n *                <GridColumn field=\"bar\" />\n *            </Grid>\n *        );\n *    }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar Grid =\n/** @class */\nfunction (_super) {\n  __extends(Grid, _super);\n\n  function Grid(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._columns = [];\n    _this._columnsMap = [[]];\n    _this._header = null;\n\n    _this.scrollHandler = function (event) {\n      if (event.currentTarget !== event.currentTarget) {\n        return;\n      }\n\n      if (_this._header) {\n        _this._header.setScrollLeft(event.currentTarget.scrollLeft);\n      }\n\n      if (_this.vs) {\n        _this.vs.scrollHandler(event);\n      }\n\n      dispatchEvent(_this.props.onScroll, event, _this, {});\n    };\n\n    _this.rowClick = function (e, item) {\n      if (_this.props.onRowClick && e.target.nodeName === 'TD') {\n        _this.props.onRowClick.call(undefined, __assign({\n          dataItem: item.dataItem\n        }, _this.getArguments(e)));\n      }\n    };\n\n    _this.itemChange = function (event) {\n      var itemChange = _this.props.onItemChange;\n\n      if (event.field === _this.props.expandField || _this.props.group && event.field === undefined) {\n        var expandChange = _this.props.onExpandChange;\n\n        if (expandChange) {\n          expandChange.call(undefined, __assign({}, _this.getArguments(event.syntheticEvent), {\n            dataItem: event.dataItem,\n            value: event.value\n          }));\n        }\n\n        return;\n      }\n\n      if (itemChange) {\n        itemChange.call(undefined, __assign({}, _this.getArguments(event.syntheticEvent), {\n          dataItem: event.dataItem,\n          field: event.field,\n          value: event.value\n        }));\n      }\n    };\n\n    _this.onHeaderSelectionChange = function (event) {\n      if (_this.props.onHeaderSelectionChange) {\n        _this.props.onHeaderSelectionChange.call(undefined, {\n          field: event.field,\n          nativeEvent: event.syntheticEvent && event.syntheticEvent.nativeEvent,\n          syntheticEvent: event.syntheticEvent,\n          target: _this\n        });\n      }\n    };\n\n    _this.pageChange = function (page, syntheticEvent) {\n      _this.raiseDataEvent(_this.props.onPageChange, {\n        page: page\n      }, {\n        skip: page.skip,\n        take: page.take\n      }, syntheticEvent);\n    };\n\n    _this.sortChange = function (sort, syntheticEvent) {\n      _this.raiseDataEvent(_this.props.onSortChange, {\n        sort: sort\n      }, {\n        sort: sort\n      }, syntheticEvent);\n    };\n\n    _this.filterChange = function (filter, syntheticEvent) {\n      _this.raiseDataEvent(_this.props.onFilterChange, {\n        filter: filter\n      }, {\n        filter: filter,\n        skip: 0\n      }, syntheticEvent);\n    };\n\n    _this.groupChange = function (groups, event) {\n      var syntheticEvent = event.nativeEvent ? event : {\n        nativeEvent: event.nativeEvent || event.originalEvent\n      };\n\n      _this.raiseDataEvent(_this.props.onGroupChange, {\n        group: groups\n      }, {\n        group: groups,\n        skip: 0\n      }, syntheticEvent);\n    };\n\n    _this.resolveTitle = function (field) {\n      var column = _this._columns.find(function (c) {\n        return c.field === field;\n      });\n\n      var title = column && (column.title || column.field);\n      return title === undefined ? field : title;\n    };\n\n    _this.vs = new VirtualScroll(props.rowHeight === undefined || props.rowHeight === 0);\n    _this.dragLogic = new CommonDragLogic(_this.columnReorder.bind(_this), _this.groupReorder.bind(_this), _this.columnToGroup.bind(_this));\n    _this.columnResize = new ColumnResize(_this.onResize.bind(_this));\n    return _this;\n  }\n\n  Object.defineProperty(Grid.prototype, \"columns\", {\n    /**\n     * A getter of the current columns. Gets the current column width or current columns,\n     * or any other [`GridColumnProps`]({% slug api_grid_gridcolumnprops %}) for each defined column.\n     * Can be used on each Grid instance. To obtain the instance of the rendered Grid, use the `ref`\n     * callback. The following example demonstrates how to reorder the columns by dragging their handlers\n     * and check the properties afterwards. You can check the result in the browser console.\n     *\n     * @example\n     * ```jsx\n     * class App extends React.Component {\n     *     constructor(props) {\n     *         super(props);\n     *         this.state = {\n     *             data: [\n     *                 { 'foo': 'A1', 'bar': 'B1' },\n     *                 { 'foo': 'A2', 'bar': 'B2' },\n     *                 { 'foo': 'A3', 'bar': 'B2' }\n     *             ]\n     *         };\n     *         this.grid = null;\n     *     }\n     *     render() {\n     *         return (\n     *             <div>\n     *                 <Grid\n     *                     data={this.state.data}\n     *                     reorderable={true}\n     *                     ref={(g) => { this.grid = g; }}\n     *                 >\n     *                     <GridColumn field=\"foo\" />\n     *                     <GridColumn field=\"bar\" />\n     *                 </Grid>\n     *                 <button onClick={() => console.log(JSON.stringify(this.grid.columns))}>\n     *                     log current properties into browser console.\n     *                 </button>\n     *             </div>\n     *         );\n     *     }\n     * }\n     * ReactDOM.render(<App />, document.querySelector('my-app'));\n     * ```\n     */\n    get: function get() {\n      var shuffledColumns = this._columns.filter(function (q) {\n        return q.declarationIndex >= 0 && q.parentIndex === -1;\n      });\n\n      var sanitize = function sanitize(columns) {\n        columns.sort(function (a, b) {\n          return a.declarationIndex - b.declarationIndex;\n        });\n        return columns.map(function (column) {\n          var declarationIndex = column.declarationIndex,\n              parentIndex = column.parentIndex,\n              depth = column.depth,\n              colSpan = column.colSpan,\n              rowSpan = column.rowSpan,\n              index = column.index,\n              kFirst = column.kFirst,\n              children = column.children,\n              props = __rest(column, [\"declarationIndex\", \"parentIndex\", \"depth\", \"colSpan\", \"rowSpan\", \"index\", \"kFirst\", \"children\"]);\n\n          return children.length ? __assign({\n            children: sanitize(children)\n          }, props) : props;\n        });\n      };\n\n      return sanitize(shuffledColumns);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  Grid.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.total !== this.props.total || nextProps.rowHeight !== this.props.rowHeight) {\n      this.vs.reset();\n      this.vs = new VirtualScroll(nextProps.rowHeight === undefined || nextProps.rowHeight === 0);\n    } else if (Math.max(0, this.vs.attendedSkip) !== nextProps.skip && nextProps.skip !== undefined) {\n      this.vs.attendedSkip = nextProps.skip;\n      this.vs.propsSkip = (nextProps.skip || 0) + (nextProps.scrollable === 'virtual' ? this.vs.topCacheCount + (this.vs.attendedSkip - (nextProps.skip || 0)) : 0);\n      this.vs.syncScroll();\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  Grid.prototype.componentWillUnmount = function () {\n    this.columnResize.columns = [];\n    this.dragLogic.columns = [];\n    this._columns = [];\n  };\n  /**\n   * @hidden\n   */\n\n\n  Grid.prototype.render = function () {\n    var _this = this;\n\n    var total = this.props.total || 0;\n    var propsData = [];\n\n    if (Array.isArray(this.props.data)) {\n      propsData = this.props.data;\n    } else if (this.props.data) {\n      propsData = this.props.data.data;\n      total = total || this.props.data.total;\n    }\n\n    var groupable = this.props.groupable === true || typeof this.props.groupable === 'object' && this.props.groupable.enabled !== false;\n    this.columnResize.resizable = this.props.resizable || false;\n    this.dragLogic.reorderable = this.props.reorderable || false;\n    this.dragLogic.groupable = groupable;\n    this.vs.PageChange = this.pageChange;\n    this.vs.realSkip = this.props.skip || 0;\n    this.vs.pageSize = (this.props.take !== undefined ? this.props.take : this.props.pageSize) || 0;\n    this.vs.scrollableVirtual = this.props.scrollable === 'virtual';\n    this.vs.total = total;\n    this.vs.propsSkip = (this.props.skip || 0) + (this.props.scrollable === 'virtual' ? this.vs.topCacheCount + (this.vs.attendedSkip - (this.props.skip || 0)) : 0);\n\n    if (this.props.rowHeight !== undefined && this.props.rowHeight > 0) {\n      this.vs.containerHeight = Math.min(1533915, this.props.rowHeight * (total || 0));\n    } else {\n      this.vs.containerHeight = 1533915;\n    }\n\n    var footer = typeof this.props.groupable === 'object' && this.props.groupable.footer || 'none';\n    var data = [];\n    var resolvedGroupsCount = flatData(data, propsData, footer, {\n      index: this.props.skip || 0\n    }, this.props.group !== undefined, this.props.expandField);\n    var children = React.Children.toArray(this.props.children);\n    this.initColumns(children.filter(function (child) {\n      return child && child.type.displayName === 'KendoReactGridColumn';\n    }), resolvedGroupsCount);\n    var toolbar = children.filter(function (child) {\n      return child && child.type.displayName === 'KendoReactGridToolbar';\n    });\n    var noRecords = children.filter(function (child) {\n      return child && child.type.displayName === 'KendoReactGridNoRecords';\n    });\n\n    var columnsWithColGroup = this._columns.filter(function (c) {\n      return c.children.length === 0;\n    });\n\n    var groupingPanel = groupable && React.createElement(GroupPanel, {\n      group: this.props.group || [],\n      groupChange: this.groupChange,\n      pressHandler: this.dragLogic.pressHandler,\n      dragHandler: this.dragLogic.dragHandler,\n      releaseHandler: this.dragLogic.releaseHandler,\n      refCallback: this.dragLogic.refGroupPanelDiv,\n      resolveTitle: this.resolveTitle\n    });\n    var clues = (this.dragLogic.reorderable || this.dragLogic.groupable) && document && document.body && [ReactDOM.createPortal(React.createElement(DropClue, {\n      ref: this.dragLogic.refDropElementClue\n    }), document.body), ReactDOM.createPortal(React.createElement(DragClue, {\n      ref: this.dragLogic.refDragElementClue\n    }), document.body)];\n    var header = React.createElement(Header, {\n      columnResize: this.columnResize,\n      staticHeaders: this.props.scrollable !== 'none',\n      ref: function ref(h) {\n        _this._header = h;\n      },\n      headerRow: React.createElement(HeaderRow, {\n        sort: this.props.sort,\n        sortable: this.props.sortable,\n        sortChange: this.sortChange,\n        filter: this.props.filter,\n        filterable: this.props.filterable,\n        filterChange: this.filterChange,\n        columnMenu: this.props.columnMenu,\n        selectionChange: this.onHeaderSelectionChange,\n        columns: this._columns,\n        columnResize: this.columnResize,\n        pressHandler: this.dragLogic.pressHandler,\n        dragHandler: this.dragLogic.dragHandler,\n        releaseHandler: this.dragLogic.releaseHandler,\n        columnsMap: this._columnsMap,\n        cellRender: this.props.headerCellRender\n      }),\n      filterRow: this.props.filterable && React.createElement(FilterRow, {\n        columns: this._columns,\n        filter: this.props.filter,\n        filterChange: this.filterChange,\n        sort: this.props.sort,\n        cellRender: this.props.filterCellRender\n      }) || undefined,\n      cols: columnsWithColGroup.map(function (column, index) {\n        return React.createElement(\"col\", {\n          key: index.toString(),\n          width: column.width !== undefined ? Math.floor(parseFloat(column.width.toString())) + 'px' : undefined\n        });\n      })\n    });\n\n    var dataRow = function dataRow(item) {\n      return _this._columns.map(function (column, index) {\n        var cellProps = {\n          dataItem: item.dataItem,\n          field: column.field,\n          editor: column.editor,\n          format: column.format,\n          className: column.className,\n          render: _this.props.cellRender,\n          onChange: _this.itemChange,\n          selectionChange: _this.props.onSelectionChange ? function (e) {\n            _this.selectionChange(e, item.dataItem);\n          } : undefined,\n          columnIndex: index,\n          columnsCount: _this._columns.filter(function (c) {\n            return !c.children.length;\n          }).length,\n          rowType: item.rowType,\n          level: item.level,\n          expanded: item.expanded,\n          dataIndex: item.dataIndex\n        };\n\n        if (column.cell) {\n          return React.createElement(column.cell, __assign({\n            key: index\n          }, cellProps));\n        }\n\n        if (column.editable && _this.props.editField) {\n          var inEdit = getNestedValue(_this.props.editField, item.dataItem);\n\n          if (inEdit === true || inEdit === column.field) {\n            return React.createElement(GridEditCell, __assign({\n              key: index\n            }, cellProps));\n          }\n        }\n\n        return React.createElement(GridCell, __assign({\n          key: index\n        }, cellProps));\n      });\n    };\n\n    var hiddenRows = 0;\n\n    if (this.props.scrollable === 'virtual') {\n      for (var i = 0; i < this.vs.topCacheCount + this.vs.attendedSkip - (this.props.skip || 0); i++) {\n        var item = data.shift();\n\n        if (item) {\n          data.push(item);\n          hiddenRows++;\n        } else {\n          break;\n        }\n      }\n    }\n\n    var hidden = function hidden(index) {\n      return index >= data.length - hiddenRows;\n    };\n\n    var absoluteIndex = function absoluteIndex(index) {\n      return index + (_this.vs.propsSkip || 0);\n    };\n\n    var groupBeginIndex = 0;\n    var body = data.length && data.map(function (item, index) {\n      if (item.rowType === 'groupHeader') {\n        groupBeginIndex = absoluteIndex(index) - 1;\n      }\n\n      var isAlt = (absoluteIndex(index) - groupBeginIndex) % 2 !== 0;\n      return [React.createElement(GridRow, {\n        key: absoluteIndex(index) * 2,\n        dataItem: item.dataItem,\n        isAltRow: isAlt,\n        rowType: item.rowType,\n        isHidden: hidden(index),\n        onClick: function onClick(e) {\n          return _this.rowClick(e, item);\n        },\n        selectedField: _this.props.selectedField,\n        rowHeight: _this.props.rowHeight,\n        render: _this.props.rowRender\n      }, dataRow(item)), _this.props.detail && item.rowType === 'data' && item.expanded && React.createElement(\"tr\", {\n        key: absoluteIndex(index) * 2 + 1,\n        className: isAlt ? 'k-detail-row k-alt' : 'k-detail-row',\n        style: {\n          visibility: hidden(index) ? 'hidden' : ''\n        }\n      }, _this.props.group && _this.props.group.map(function (group, idx) {\n        return React.createElement(GridGroupCell, {\n          dataIndex: item.dataIndex,\n          field: group.field,\n          dataItem: item.dataItem,\n          key: idx\n        });\n      }), _this.props.expandField && React.createElement(\"td\", {\n        className: \"k-hierarchy-cell\"\n      }), React.createElement(\"td\", {\n        className: \"k-detail-cell\",\n        colSpan: _this._columns.filter(function (c) {\n          return !c.children.length;\n        }).length - (_this.props.expandField ? 1 : 0) - (_this.props.group ? _this.props.group.length : 0)\n      }, React.createElement(_this.props.detail, {\n        dataItem: item.dataItem\n      })))];\n    }) || React.createElement(\"tr\", {\n      className: \"k-grid-norecords\"\n    }, React.createElement(\"td\", {\n      colSpan: this._columns.filter(function (c) {\n        return !c.children.length;\n      }).length\n    }, noRecords.length ? noRecords : React.createElement(GridNoRecords, null)));\n    var pager = this.props.pageable && React.createElement(Pager, {\n      pageChange: this.pageChange,\n      total: total,\n      skip: this.vs.propsSkip || 0,\n      pageSize: (this.props.take !== undefined ? this.props.take : this.props.pageSize) || 10,\n      settings: this.props.pageable\n    });\n\n    var sorted = function sorted(field) {\n      return _this.props.sort && _this.props.sort.filter(function (descriptor) {\n        return descriptor.field === field;\n      }).length > 0;\n    };\n\n    var colGroups = React.createElement(\"colgroup\", {\n      ref: function ref(c) {\n        _this.columnResize.colGroupMain = c;\n      }\n    }, columnsWithColGroup.map(function (column, index) {\n      return React.createElement(\"col\", {\n        key: index.toString(),\n        className: sorted(column.field) ? 'k-sorted' : undefined,\n        width: column.width !== undefined ? Math.floor(parseFloat(column.width.toString())) + 'px' : undefined\n      });\n    }));\n\n    if (this.props.scrollable === 'none') {\n      return React.createElement(\"div\", {\n        style: this.props.style,\n        className: \"k-widget k-grid\"\n      }, toolbar, groupingPanel, React.createElement(\"table\", {\n        ref: function ref(table) {\n          _this.vs.table = table;\n\n          _this.resetTableWidth();\n        }\n      }, colGroups, header, React.createElement(\"tbody\", null, body)), pager, clues);\n    }\n\n    var wrapperStyle = this.props.style || {};\n\n    if (this.props.scrollable === 'virtual') {\n      // Set the default height for vs if not existing.\n      if (!wrapperStyle.height) {\n        wrapperStyle = Object.assign({}, wrapperStyle, {\n          height: '450px'\n        });\n      }\n    }\n\n    return React.createElement(\"div\", {\n      style: wrapperStyle,\n      className: 'k-widget k-grid' + (this.props.scrollable === 'virtual' ? ' k-grid-virtual' : '')\n    }, toolbar, groupingPanel, header, React.createElement(\"div\", {\n      className: \"k-grid-container\"\n    }, React.createElement(\"div\", {\n      ref: function ref(container) {\n        _this.vs.container = container;\n      },\n      className: \"k-grid-content k-virtual-content\",\n      onScroll: this.scrollHandler\n    }, React.createElement(\"div\", {\n      style: {\n        'position': 'relative'\n      }\n    }, React.createElement(\"table\", {\n      tabIndex: -1,\n      className: 'k-grid-table',\n      ref: function ref(table) {\n        _this.vs.table = table;\n\n        _this.resetTableWidth();\n      }\n    }, colGroups, React.createElement(\"tbody\", {\n      ref: function ref(tableBody) {\n        _this.vs.tableBody = tableBody;\n      }\n    }, body))), React.createElement(\"div\", {\n      className: \"k-height-container\"\n    }, React.createElement(\"div\", {\n      style: this.props.scrollable === 'virtual' ? {\n        'height': this.vs.containerHeight + 'px'\n      } : {}\n    })))), pager, clues);\n  };\n\n  Grid.prototype.selectionChange = function (event, dataItem) {\n    if (this.props.onSelectionChange) {\n      this.props.onSelectionChange.call(undefined, __assign({}, this.getArguments(event.syntheticEvent), {\n        dataItem: dataItem\n      }));\n    }\n  };\n\n  Grid.prototype.raiseDataEvent = function (handler, data, moreData, syntheticEvent) {\n    var dataStateChange = this.props.onDataStateChange;\n\n    if (handler) {\n      handler.call(undefined, __assign({}, this.getArguments(syntheticEvent), data));\n    } else if (dataStateChange) {\n      dataStateChange.call(undefined, __assign({}, this.getArguments(syntheticEvent), {\n        data: __assign({}, this.getDataState(), moreData)\n      }));\n    }\n  };\n\n  Grid.prototype.columnReorder = function (prev, next, nativeEvent) {\n    var _this = this;\n\n    var _a;\n\n    var depth = this._columns[prev].depth;\n\n    var end = function end(index) {\n      do {\n        index++;\n      } while (index < _this._columns.length && _this._columns[index].depth > depth);\n\n      return index;\n    };\n\n    var spliced = this._columns.splice(prev, end(prev) - prev);\n\n    (_a = this._columns).splice.apply(_a, [prev < next ? end(next - spliced.length) : next, 0].concat(spliced));\n\n    this._columns.filter(function (q) {\n      return q.declarationIndex >= 0;\n    }).forEach(function (c, i) {\n      return c.orderIndex = i;\n    });\n\n    var eventColumnProps = this.columns;\n    this.forceUpdate();\n\n    if (this.props.onColumnReorder) {\n      this.props.onColumnReorder.call(undefined, {\n        target: this,\n        columns: eventColumnProps,\n        nativeEvent: nativeEvent\n      });\n    }\n  };\n\n  Grid.prototype.groupReorder = function (prevIndex, nextIndex, nativeEvent) {\n    if (this.props.group === undefined) {\n      return;\n    }\n\n    var group = this.props.group.slice();\n    group.splice.apply(group, [nextIndex, 0].concat(group.splice(prevIndex, 1)));\n    this.groupChange(group, nativeEvent);\n  };\n\n  Grid.prototype.columnToGroup = function (columnIndex, groupIndex, nativeEvent) {\n    var field = this._columns[columnIndex].field;\n\n    if (!field) {\n      return;\n    }\n\n    var group = (this.props.group || []).slice();\n    group.splice(groupIndex, 0, {\n      field: field\n    });\n    this.groupChange(group, nativeEvent);\n  };\n\n  Grid.prototype.resetTableWidth = function () {\n    var totalWidth = 0;\n\n    if (!this.columnResize.colGroupMain) {\n      return;\n    }\n\n    var colElements = this.columnResize.colGroupMain.children;\n\n    for (var i = 0; i < colElements.length; i++) {\n      var width = colElements[i].width;\n\n      if (!width) {\n        return;\n      }\n\n      totalWidth += parseFloat(width.toString());\n    }\n\n    totalWidth = Math.round(totalWidth);\n\n    if (this._header) {\n      this._header.setWidth(totalWidth);\n    }\n\n    if (this.vs.table) {\n      this.vs.table.style.width = totalWidth + 'px';\n    }\n  };\n\n  Grid.prototype.onResize = function (index, newWidth, oldWidth, nativeEvent, end) {\n    this.resetTableWidth();\n\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize.call(undefined, {\n        columns: this.columns,\n        index: index,\n        nativeEvent: nativeEvent,\n        newWidth: newWidth,\n        oldWidth: oldWidth,\n        end: end,\n        target: this\n      });\n    }\n  };\n\n  Grid.prototype.initColumns = function (columnElements, groupCount) {\n    var _this = this;\n\n    this._columns = readColumns(columnElements, this.columns);\n\n    if (this._columns.length === 0) {\n      this._columns = autoGenerateColumns(this.props.data, this.props.group, this.props.expandField);\n    }\n\n    if (this.props.selectedField) {\n      this._columns.filter(function (c) {\n        return c.field === _this.props.selectedField;\n      }).forEach(function (c) {\n        c.width = c.width || '50px';\n        c.cell = c.cell || GridSelectionCell;\n        c.headerCell = c.headerCell || GridHeaderSelectionCell;\n      });\n    }\n\n    var defaultServiceProps = {\n      resizable: true,\n      width: '32px',\n      title: ' ',\n      declarationIndex: -1,\n      orderIndex: -1,\n      children: [],\n      parentIndex: -1,\n      depth: 0,\n      colSpan: 0,\n      rowSpan: 0,\n      index: 0\n    };\n    var columnIndexOffset = 0;\n\n    if (this.props.expandField && this.props.onExpandChange && this.props.detail) {\n      this._columns.unshift(__assign({}, defaultServiceProps, {\n        cell: GridHierarchyCell,\n        field: this.props.expandField,\n        headerClassName: 'k-hierarchy-cell k-header'\n      }));\n\n      columnIndexOffset++;\n    }\n\n    for (var i = 0; i < groupCount; i++) {\n      this._columns.unshift(__assign({}, defaultServiceProps, {\n        cell: GridGroupCell,\n        field: 'value'\n      }));\n\n      columnIndexOffset++;\n    }\n\n    this._columns.slice(columnIndexOffset).forEach(function (c) {\n      return c.parentIndex >= 0 && (c.parentIndex += columnIndexOffset);\n    });\n\n    this._columnsMap = mapColumns(this._columns);\n    this.columnResize.columns = this._columns;\n    this.dragLogic.columns = this._columns;\n  };\n\n  Grid.prototype.getDataState = function () {\n    return {\n      filter: this.props.filter,\n      sort: this.props.sort,\n      skip: this.props.skip,\n      take: this.props.take !== undefined ? this.props.take : this.props.pageSize,\n      group: this.props.group\n    };\n  };\n\n  Grid.prototype.getArguments = function (syntheticEvent) {\n    return {\n      nativeEvent: syntheticEvent && syntheticEvent.nativeEvent,\n      syntheticEvent: syntheticEvent,\n      target: this\n    };\n  };\n  /**\n   * @hidden\n   */\n\n\n  Grid.displayName = 'KendoReactGrid';\n  /**\n   * @hidden\n   */\n\n  Grid.defaultProps = {\n    scrollable: 'scrollable' // All other properties are undefined by default.\n\n  };\n  /**\n   * @hidden\n   */\n\n  Grid.propTypes = {\n    data: PropTypes.oneOfType([PropTypes.array, PropTypes.shape({\n      data: PropTypes.array,\n      total: PropTypes.number\n    })]),\n    sortable: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n      mode: PropTypes.oneOf(['single', 'multiple']),\n      allowUnsort: PropTypes.bool\n    })]),\n    onSortChange: PropTypes.func,\n    sort: PropTypes.array,\n    filterable: PropTypes.bool,\n    filter: PropTypes.any,\n    onFilterChange: PropTypes.func,\n    pageable: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n      buttonCount: PropTypes.number,\n      info: PropTypes.bool,\n      type: PropTypes.oneOf(['numeric', 'input']),\n      pageSizes: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.number)]),\n      previousNext: PropTypes.bool\n    })]),\n    pageSize: PropTypes.number,\n    onPageChange: PropTypes.func,\n    total: PropTypes.number,\n    skip: PropTypes.number,\n    take: PropTypes.number,\n    onExpandChange: PropTypes.func,\n    expandField: PropTypes.string,\n    selectedField: PropTypes.string,\n    onSelectionChange: PropTypes.func,\n    onHeaderSelectionChange: PropTypes.func,\n    resizable: PropTypes.bool,\n    reorderable: PropTypes.bool,\n    group: PropTypes.any,\n    groupable: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n      enabled: PropTypes.bool,\n      footer: PropTypes.oneOf(['always', 'visible', 'none'])\n    })]),\n    onGroupChange: PropTypes.func,\n    onRowClick: PropTypes.func,\n    onItemChange: PropTypes.func,\n    editField: PropTypes.string,\n    scrollable: PropTypes.oneOf(['none', 'scrollable', 'virtual']),\n    rowHeight: PropTypes.number,\n    detail: PropTypes.any,\n    style: PropTypes.object,\n    onDataStateChange: PropTypes.func,\n    onColumnResize: PropTypes.func,\n    onColumnReorder: PropTypes.func\n  };\n  return Grid;\n}(React.Component);\n\nexport { Grid };","map":null,"metadata":{},"sourceType":"module"}