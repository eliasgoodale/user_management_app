{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport * as React from 'react';\nimport { isCompositeFilterDescriptor } from '@progress/kendo-data-query';\nimport { GridColumnMenuItem } from './GridColumnMenuItem';\nimport { GridColumnMenuItemGroup } from './GridColumnMenuItemGroup';\nimport { GridColumnMenuItemContent } from './GridColumnMenuItemContent';\nimport { provideLocalizationService, registerForLocalization } from '@progress/kendo-react-intl';\nimport { operators, operatorMap, defaultOperators, filterLogicList, defaultHideSecondFilter } from '../filterCommon';\nimport { messages, filterClearButton, filterSubmitButton, filterTitle } from '../messages';\nimport { GridColumnMenuFilterUI } from './GridColumnMenuFilterUI';\n/**\n * @example\n * ```jsx\n * class TextColumnMenu extends React.Component {\n *     render() {\n *         return (\n *         <div>\n *             <GridColumnMenuSort {...this.props} />\n *             <GridColumnMenuFilter {...this.props} />\n *         </div>);\n *     }\n * }\n *\n * class App extends React.PureComponent {\n *     constructor(props) {\n *         super(props);\n *\n *         this.state = this.createAppState({\n *             take: 10,\n *             skip: 0\n *         });\n *     }\n *\n *     createAppState(dataState) {\n *         return {\n *             result: process(products.slice(0), dataState),\n *             dataState: dataState\n *         };\n *     }\n *\n *     dataStateChange = (event) => {\n *         this.setState(this.createAppState(event.data));\n *     }\n *\n *     render() {\n *         return (\n *             <div>\n *                 <Grid\n *                     data={this.state.result}\n *                     {...this.state.dataState}\n *                     onDataStateChange={this.dataStateChange}\n *                     sortable={true}\n *                     pageable={true}\n *                 >\n *                     <Column field=\"ProductID\" title=\"Product ID\" />\n *                     <Column field=\"ProductName\" columnMenu={TextColumnMenu} />\n *                 </Grid>\n *                 <br />\n *             </div>\n *         );\n *     }\n * }\n *\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar GridColumnMenuFilter =\n/** @class */\nfunction (_super) {\n  __extends(GridColumnMenuFilter, _super);\n\n  function GridColumnMenuFilter(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.isControlled = function () {\n      return _this.props.expanded !== undefined;\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.onFilterExpand = function () {\n      var isControlled = _this.isControlled();\n\n      var nextValue = !(isControlled ? _this.props.expanded : _this.state.expanded);\n\n      if (_this.props.onExpandChange) {\n        _this.props.onExpandChange(nextValue);\n      }\n\n      if (!isControlled) {\n        _this.setState({\n          expanded: nextValue\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.firstFilterChange = function (e) {\n      _this.filterChange(0, e);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.secondFilterChange = function (e) {\n      _this.filterChange(1, e);\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.logicChange = function (e) {\n      _this.setState({\n        filterGroup: __assign({}, _this.state.filterGroup, {\n          logic: e.target.value.operator\n        })\n      });\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.clear = function (e) {\n      e.preventDefault();\n\n      if (!_this.props.onFilterChange) {\n        return;\n      }\n\n      var field = _this.props.column.field;\n\n      var rootFilter = _this.rootFilterOrDefault(_this.props.filter);\n\n      var filterGroup = _this.filterGroupByField(field, _this.rootFilterOrDefault(_this.props.filter));\n\n      var rootFilters = rootFilter.filters.filter(function (f) {\n        return f !== filterGroup;\n      });\n\n      if (!rootFilters.length) {\n        _this.props.onFilterChange(null, e);\n      } else {\n        _this.props.onFilterChange(__assign({}, rootFilter, {\n          filters: rootFilters\n        }), e);\n      }\n\n      if (_this.props.onCloseMenu) {\n        _this.props.onCloseMenu();\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.currentFilterGroup = function () {\n      return __assign({}, _this.state.filterGroup, {\n        filters: _this.state.filterGroup.filters.filter(function (nf) {\n          return nf.value !== undefined && nf.value !== null && nf.value !== '' || nf.value === null && nf.operator;\n        })\n      });\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.submit = function (e) {\n      e.preventDefault();\n\n      if (!_this.props.onFilterChange) {\n        return;\n      }\n\n      var field = _this.props.column.field;\n\n      var rootFilter = _this.rootFilterOrDefault(_this.props.filter);\n\n      var filterGroup = _this.filterGroupByField(field, _this.rootFilterOrDefault(_this.props.filter));\n\n      var currentFilterGroup = _this.currentFilterGroup();\n\n      var updatedFilter = null;\n\n      if (filterGroup && currentFilterGroup.filters.length > 0) {\n        var rootFilters = rootFilter.filters.map(function (f) {\n          if (f === filterGroup) {\n            return currentFilterGroup;\n          }\n\n          return f;\n        });\n        updatedFilter = __assign({}, rootFilter, {\n          filters: rootFilters\n        });\n      } else if (currentFilterGroup.filters.length === 0) {\n        var rootFilters = rootFilter.filters.filter(function (f) {\n          return f !== filterGroup;\n        });\n\n        if (rootFilters.length) {\n          updatedFilter = __assign({}, rootFilter, {\n            filters: rootFilters\n          });\n        }\n      } else {\n        updatedFilter = __assign({}, rootFilter, {\n          filters: rootFilter.filters.concat([currentFilterGroup])\n        });\n      }\n\n      _this.props.onFilterChange(updatedFilter, e);\n\n      if (_this.props.onCloseMenu) {\n        _this.props.onCloseMenu();\n      }\n    };\n\n    var filterGroup;\n\n    if (props.column && props.column.field) {\n      var filterType = props.column.filter || 'text';\n      var defaultOperator = defaultOperators[filterType];\n      filterGroup = _this.filterGroupByField(props.column.field, _this.rootFilterOrDefault(props.filter));\n      filterGroup = filterGroup ? __assign({}, filterGroup, {\n        filters: filterGroup.filters.map(function (f) {\n          return __assign({}, f);\n        })\n      }) : {\n        logic: 'and',\n        filters: [{\n          field: props.column.field,\n          operator: defaultOperator\n        }, {\n          field: props.column.field,\n          operator: defaultOperator\n        }]\n      };\n\n      if (filterGroup.filters.filter(function (x) {\n        return x.field === props.column.field;\n      }).length === 1) {\n        filterGroup.filters.splice(1, 0, {\n          field: props.column.field,\n          operator: defaultOperator\n        });\n      }\n    }\n\n    _this.state = {\n      expanded: props.expanded || false,\n      filterGroup: filterGroup\n    };\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuFilter.prototype.rootFilterOrDefault = function (rootFilter) {\n    return rootFilter || {\n      filters: [],\n      logic: 'and'\n    };\n  };\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuFilter.prototype.filterGroupByField = function (field, filter) {\n    var rootFilter = this.rootFilterOrDefault(filter);\n    var compositeFilters = rootFilter.filters.filter(function (f) {\n      if (isCompositeFilterDescriptor(f)) {\n        return f.filters && f.filters.length && f.filters.length <= 2 && !f.filters.find(function (nf) {\n          return isCompositeFilterDescriptor(nf) || nf.field !== field;\n        });\n      }\n\n      return false;\n    });\n    return compositeFilters[0] || null;\n  };\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuFilter.prototype.removeGroup = function (group, rootFilter) {\n    var filters = rootFilter.filters.slice();\n    var groupIndex = filters.findIndex(function (f) {\n      return f === group;\n    });\n\n    if (groupIndex > -1) {\n      filters.splice(groupIndex, 1);\n    }\n\n    return __assign({}, rootFilter, {\n      filters: filters\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuFilter.prototype.insertGroup = function (group, rootFilter) {\n    return __assign({}, rootFilter, {\n      filters: [group].concat(rootFilter.filters)\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuFilter.prototype.filterChange = function (filterIndex, e) {\n    var filters = this.state.filterGroup.filters.map(function (f, i) {\n      if (i === filterIndex) {\n        return __assign({}, f, {\n          value: e.value,\n          operator: e.operator\n        });\n      }\n\n      return f;\n    });\n    this.setState({\n      filterGroup: __assign({}, this.state.filterGroup, {\n        filters: filters\n      })\n    });\n  };\n  /**\n   * @hidden\n   */\n\n\n  GridColumnMenuFilter.prototype.render = function () {\n    var _a = this.props,\n        column = _a.column,\n        filterUI = _a.filterUI,\n        hideSecondFilter = _a.hideSecondFilter;\n\n    if (!column || !column.field) {\n      return React.createElement(\"div\", null);\n    }\n\n    var filterType = column.filter || 'text';\n    var currentHideSecondFilter = hideSecondFilter !== undefined ? hideSecondFilter : defaultHideSecondFilter[filterType];\n    var localizationService = provideLocalizationService(this);\n    var filters = this.state.filterGroup.filters;\n    var currentOperators = operatorMap(operators[filterType], localizationService);\n    var firstFilterCellProps = {\n      field: column.field,\n      value: filters[0].value,\n      operator: filters[0].operator,\n      onChange: this.firstFilterChange,\n      filterType: filterType\n    };\n    var secondFilterCellProps = {\n      field: column.field,\n      value: filters[1].value,\n      operator: filters[1].operator,\n      onChange: this.secondFilterChange,\n      filterType: filterType\n    };\n    var filterLogic = this.state.filterGroup.logic;\n    var logicData = operatorMap(filterLogicList, localizationService);\n    var logicProps = {\n      value: logicData.find(function (item) {\n        return item.operator === (filterLogic === null ? '' : filterLogic);\n      }),\n      onChange: this.logicChange,\n      data: logicData\n    };\n    var FilterUI = filterUI;\n    var filterUIProps = {\n      firstFilterProps: firstFilterCellProps,\n      secondFilterProps: secondFilterCellProps,\n      logicData: logicProps.data,\n      logicValue: logicProps.value,\n      onLogicChange: logicProps.onChange,\n      hideSecondFilter: currentHideSecondFilter,\n      operators: currentOperators\n    };\n    var isFilterValid = this.currentFilterGroup().filters.length !== 0;\n    var expandState = this.isControlled() ? this.props.expanded : this.state.expanded;\n    return React.createElement(GridColumnMenuItemGroup, null, React.createElement(GridColumnMenuItem, {\n      title: localizationService.toLanguageString(filterTitle, messages[filterTitle]),\n      iconClass: 'k-i-filter',\n      onClick: this.onFilterExpand\n    }), React.createElement(GridColumnMenuItemContent, {\n      show: !!expandState\n    }, React.createElement(\"div\", {\n      className: 'kendo-grid-filter-menu-container'\n    }, React.createElement(\"form\", {\n      className: 'k-filter-menu k-group k-reset k-state-border-up',\n      onSubmit: this.submit,\n      onReset: this.clear\n    }, React.createElement(\"div\", {\n      className: 'k-filter-menu-container'\n    }, FilterUI ? React.createElement(FilterUI, __assign({}, filterUIProps)) : React.createElement(GridColumnMenuFilterUI, __assign({}, filterUIProps)), React.createElement(\"div\", {\n      className: 'k-columnmenu-actions'\n    }, React.createElement(\"button\", {\n      className: 'k-button',\n      type: 'reset'\n    }, localizationService.toLanguageString(filterClearButton, messages[filterClearButton])), React.createElement(\"button\", {\n      className: 'k-button k-primary',\n      disabled: !isFilterValid\n    }, localizationService.toLanguageString(filterSubmitButton, messages[filterSubmitButton]))))))));\n  };\n\n  return GridColumnMenuFilter;\n}(React.Component);\n\nexport { GridColumnMenuFilter };\nregisterForLocalization(GridColumnMenuFilter);","map":null,"metadata":{},"sourceType":"module"}