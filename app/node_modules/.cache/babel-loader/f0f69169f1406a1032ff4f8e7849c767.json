{"ast":null,"code":"import { isPresent } from '../utils';\nimport { compose } from '../funcs';\n\nvar set = function set(field, target, value) {\n  target[field] = value;\n  return target;\n};\n\nvar toCamelCase = function toCamelCase(str) {\n  return str.replace(/(^[A-Z])/g, function (_, g1) {\n    return g1.toLowerCase();\n  });\n};\n\nvar prop = function prop(fieldName) {\n  return function (obj) {\n    var value = obj[fieldName];\n\n    if (isPresent(value)) {\n      return value;\n    }\n\n    return obj[toCamelCase(fieldName)];\n  };\n};\n\nvar member = prop(\"Member\");\nvar aggregateMethodName = prop(\"AggregateMethodName\");\nvar value = prop(\"Value\");\n\nvar convert = function convert(mapper) {\n  return function (values) {\n    return Object.keys(values).reduce(mapper.bind(null, values), {});\n  };\n};\n\nvar translateAggregate = convert(function (source, acc, field) {\n  return set(field.toLowerCase(), acc, source[field]);\n});\nvar translateAggregates = convert(function (source, acc, field) {\n  return set(field, acc, translateAggregate(source[field]));\n});\n\nvar valueOrDefault = function valueOrDefault(value, defaultValue) {\n  return isPresent(value) ? value : defaultValue;\n};\n\nvar normalizeGroup = function normalizeGroup(group) {\n  return {\n    aggregates: group.Aggregates || group.aggregates,\n    field: group.Member || group.member || group.field,\n    hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n    items: group.Items || group.items,\n    value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n  };\n};\n\nvar translateGroup = compose(function (_a) {\n  var field = _a.field,\n      hasSubgroups = _a.hasSubgroups,\n      value = _a.value,\n      aggregates = _a.aggregates,\n      items = _a.items;\n  return {\n    aggregates: translateAggregates(aggregates),\n    field: field,\n    items: hasSubgroups ? items.map(translateGroup) : items,\n    value: value\n  };\n}, normalizeGroup);\n/**\n * Converts the grouped result, which is returned into the `Data` field\n * of the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `Data` field of the response.\n * @returns {GroupResult[]} - The converted result.\n */\n\nexport var translateDataSourceResultGroups = function translateDataSourceResultGroups(data) {\n  return data.map(translateGroup);\n};\n/**\n * Converts the `AggregateResults` field content, which is returned by the\n * UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `AggregateResults` field of the response.\n * @returns {AggregateResult} - The converted result.\n */\n\nexport var translateAggregateResults = function translateAggregateResults(data) {\n  return (data || []).reduce(function (acc, x) {\n    return set(member(x), acc, set(aggregateMethodName(x).toLowerCase(), acc[member(x)] || {}, value(x)));\n  }, {});\n};","map":null,"metadata":{},"sourceType":"module"}