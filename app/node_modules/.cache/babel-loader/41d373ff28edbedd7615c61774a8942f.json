{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { getNestedValue } from './../utils';\nimport { registerForIntl, provideIntlService } from '@progress/kendo-react-intl';\n\nvar GridCell =\n/** @class */\nfunction (_super) {\n  __extends(GridCell, _super);\n\n  function GridCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  GridCell.prototype.render = function () {\n    var defaultRendering = null;\n\n    if (this.props.rowType === 'groupFooter') {\n      defaultRendering = React.createElement(\"td\", {\n        className: this.props.className\n      });\n    } else if (this.props.field !== undefined && this.props.rowType !== 'groupHeader') {\n      var data = getNestedValue(this.props.field, this.props.dataItem);\n      var dataAsString = '';\n\n      if (data !== undefined && data !== null) {\n        dataAsString = this.props.format ? provideIntlService(this).format(this.props.format, data) : data.toString();\n      }\n\n      defaultRendering = React.createElement(\"td\", {\n        className: this.props.className\n      }, dataAsString);\n    }\n\n    return this.props.render ? this.props.render.call(undefined, defaultRendering, this.props) : defaultRendering;\n  };\n\n  return GridCell;\n}(React.Component);\n\nexport { GridCell };\nregisterForIntl(GridCell);","map":null,"metadata":{},"sourceType":"module"}