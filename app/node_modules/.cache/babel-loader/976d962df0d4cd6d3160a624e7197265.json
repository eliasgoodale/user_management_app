{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { normalize } from './GridPagerSettings';\nimport { PagerNumericButtons } from './PagerNumericButtons';\nimport { PagerInput } from './PagerInput';\nimport { PagerPageSizes } from './PagerPageSizes';\nimport { messages, pagerFirstPage, pagerLastPage, pagerNextPage, pagerPreviousPage, pagerInfo } from '../messages';\nimport { registerForIntl, registerForLocalization, provideLocalizationService, provideIntlService } from '@progress/kendo-react-intl';\n/**\n * @hidden\n */\n\nvar Pager =\n/** @class */\nfunction (_super) {\n  __extends(Pager, _super);\n\n  function Pager() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.changePage = function (page, e) {\n      if (_this.props.pageChange && page > 0 && page <= _this.totalPages) {\n        _this.props.pageChange({\n          skip: (page - 1) * _this.props.pageSize,\n          take: _this.props.pageSize\n        }, e);\n      }\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(Pager.prototype, \"totalPages\", {\n    get: function get() {\n      return Math.ceil((this.props.total || 0) / this.props.pageSize);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Pager.prototype, \"currentPage\", {\n    get: function get() {\n      return Math.floor((this.props.skip || 0) / this.props.pageSize) + 1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Pager.prototype.button = function (page, className, title, icon) {\n    var _this = this;\n\n    return React.createElement(\"a\", {\n      onClick: function onClick(e) {\n        e.preventDefault();\n\n        _this.changePage(page, e);\n      },\n      href: \"#\",\n      className: className,\n      title: title\n    }, React.createElement(\"span\", {\n      className: icon,\n      \"aria-label\": title\n    }));\n  };\n\n  Pager.prototype.render = function () {\n    var settings = normalize(this.props.settings);\n    var localizationService = provideLocalizationService(this);\n    var intlService = provideIntlService(this);\n    var changer = settings.type === 'numeric' ? React.createElement(PagerNumericButtons, {\n      buttonCount: settings.buttonCount || 0,\n      totalPages: this.totalPages,\n      currentPage: this.currentPage,\n      pageChange: this.changePage\n    }) : React.createElement(PagerInput, {\n      currentPage: this.currentPage,\n      totalPages: this.totalPages,\n      pageChange: this.changePage\n    });\n    var first, prev, next, last;\n\n    if (settings.previousNext) {\n      first = this.button(1, 'k-link k-pager-nav k-pager-first' + (this.currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerFirstPage, messages[pagerFirstPage]), 'k-icon k-i-seek-w');\n      prev = this.button(this.currentPage - 1, 'k-link k-pager-nav' + (this.currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerPreviousPage, messages[pagerPreviousPage]), 'k-icon k-i-arrow-w');\n      next = this.button(this.currentPage + 1, 'k-link k-pager-nav' + (this.currentPage === this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerNextPage, messages[pagerNextPage]), 'k-icon k-i-arrow-e');\n      last = this.button(this.totalPages, 'k-link k-pager-nav k-pager-last' + (this.currentPage === this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(pagerLastPage, messages[pagerLastPage]), 'k-icon k-i-seek-e');\n    }\n\n    var pageSizes = settings.pageSizes !== false && React.createElement(PagerPageSizes, {\n      pageChange: this.props.pageChange,\n      pageSize: this.props.pageSize,\n      pageSizes: settings.pageSizes\n    });\n    var defaultMessage = messages[pagerInfo];\n    var info = !settings.info ? '' : React.createElement(\"div\", {\n      className: \"k-pager-info k-label\"\n    }, intlService.format(localizationService.toLanguageString(pagerInfo, defaultMessage), [Math.min(this.props.skip + 1, this.props.total), Math.min(this.props.skip + this.props.pageSize, this.props.total), this.props.total]));\n    return React.createElement(\"div\", {\n      className: \"k-pager-wrap k-grid-pager k-widget\"\n    }, first, prev, changer, next, last, pageSizes, info);\n  };\n\n  return Pager;\n}(React.Component);\n\nexport { Pager };\nregisterForIntl(Pager);\nregisterForLocalization(Pager);","map":null,"metadata":{},"sourceType":"module"}