{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { isCompositeFilterDescriptor } from '../filtering/filter-descriptor.interface';\nimport { isPresent, isNotNullOrEmptyString, isArray } from '../utils';\nimport { getter } from '../accessor';\nimport { compose, ifElse, identity } from '../funcs';\nimport { isStringValue, isDateValue, quote, serializeFilters, toUTC, encodeValue } from '../filter-serialization.common';\n\nvar toQueryString = function toQueryString(values) {\n  return values.reduce(function (acc, _a) {\n    var key = _a[0],\n        value = _a[1];\n    return acc.concat([key + \"=\" + value]);\n  }, []);\n};\n\nvar toObject = function toObject(values) {\n  return values.reduce(function (acc, _a) {\n    var key = _a[0],\n        value = _a[1];\n    return tslib_1.__assign({}, acc, (_b = {}, _b[key] = value, _b));\n\n    var _b;\n  }, {});\n};\n\nvar pairwise = function pairwise(key) {\n  return function (value) {\n    return [key, value];\n  };\n};\n\nvar empty = function empty() {\n  return null;\n};\n\nvar isNotEmptyArray = function isNotEmptyArray(value) {\n  return isPresent(value) && isArray(value) && value.length > 0;\n};\n\nvar has = function has(accessor) {\n  return function (value) {\n    return isPresent(accessor(value));\n  };\n};\n\nvar isNotEmpty = function isNotEmpty(accessor) {\n  return function (value) {\n    return isNotEmptyArray(accessor(value));\n  };\n};\n\nvar runOrEmpty = function runOrEmpty(predicate, fn) {\n  return ifElse(predicate, fn, empty);\n};\n\nvar calcPage = function calcPage(_a) {\n  var skip = _a.skip,\n      take = _a.take;\n  return Math.floor((skip || 0) / take) + 1;\n};\n\nvar formatDescriptors = function formatDescriptors(accessor, formatter) {\n  return function (state) {\n    return accessor(state).map(formatter).join(\"~\");\n  };\n};\n\nvar removeAfter = function removeAfter(what) {\n  return function (str) {\n    return str.slice(0, str.indexOf(what));\n  };\n};\n\nvar replace = function replace(patterns) {\n  return compose.apply(void 0, patterns.map(function (_a) {\n    var left = _a[0],\n        right = _a[1];\n    return function (s) {\n      return s.replace(new RegExp(left, \"g\"), right);\n    };\n  }));\n};\n\nvar sanitizeDateLiterals = replace([[\"\\\"\", \"\"], [\":\", \"-\"]]);\nvar removeAfterDot = removeAfter(\".\");\n\nvar directionFormatter = function directionFormatter(_a) {\n  var field = _a.field,\n      _b = _a.dir,\n      dir = _b === void 0 ? \"asc\" : _b;\n  return field + \"-\" + dir;\n};\n\nvar aggregateFormatter = function aggregateFormatter(_a) {\n  var field = _a.field,\n      aggregate = _a.aggregate;\n  return field + \"-\" + aggregate;\n};\n\nvar take = getter(\"take\");\nvar aggregates = getter(\"aggregates\");\nvar skip = getter(\"skip\");\nvar group = getter(\"group\");\nvar sort = getter(\"sort\", true);\nvar formatSort = formatDescriptors(sort, directionFormatter);\nvar formatGroup = formatDescriptors(group, directionFormatter);\nvar formatAggregates = formatDescriptors(aggregates, aggregateFormatter);\n\nvar prefixDateValue = function prefixDateValue(value) {\n  return \"datetime'\" + value + \"'\";\n};\n\nvar formatDateValue = compose(prefixDateValue, removeAfterDot, sanitizeDateLiterals, JSON.stringify, toUTC);\n\nvar formatDate = function formatDate(_a) {\n  var field = _a.field,\n      value = _a.value,\n      ignoreCase = _a.ignoreCase,\n      operator = _a.operator;\n  return {\n    value: formatDateValue(value),\n    field: field,\n    ignoreCase: ignoreCase,\n    operator: operator\n  };\n};\n\nvar normalizeSort = function normalizeSort(state) {\n  return Object.assign({}, state, {\n    sort: (sort(state) || []).filter(function (_a) {\n      var dir = _a.dir;\n      return isNotNullOrEmptyString(dir);\n    })\n  });\n};\n\nvar transformSkip = compose(pairwise('page'), calcPage);\nvar transformTake = compose(pairwise('pageSize'), take);\nvar transformGroup = compose(pairwise('group'), formatGroup);\nvar transformSort = compose(pairwise('sort'), formatSort);\nvar transformAggregates = compose(pairwise('aggregate'), formatAggregates);\nvar serializePage = runOrEmpty(has(skip), transformSkip);\nvar serializePageSize = runOrEmpty(has(take), transformTake);\nvar serializeGroup = runOrEmpty(isNotEmpty(group), transformGroup);\nvar serializeAggregates = runOrEmpty(has(aggregates), transformAggregates);\nvar serializeSort = compose(runOrEmpty(isNotEmpty(sort), transformSort), normalizeSort);\n\nvar hasField = function hasField(_a) {\n  var field = _a.field;\n  return isNotNullOrEmptyString(field);\n};\n\nvar filterFormatter = function filterFormatter(_a) {\n  var field = _a.field,\n      operator = _a.operator,\n      value = _a.value;\n  return field + \"~\" + operator + \"~\" + value;\n};\n\nvar dateFormatter = ifElse(isDateValue, compose(filterFormatter, formatDate), filterFormatter);\n\nvar typedFormatter = function typedFormatter(encode) {\n  return runOrEmpty(hasField, ifElse(isStringValue, compose(filterFormatter, quote, encode ? encodeValue : identity), dateFormatter));\n};\n\nvar join = function join(_a) {\n  var logic = _a.logic;\n  return \"~\" + logic + \"~\";\n};\n\nvar serialize = function serialize(encode) {\n  return serializeFilters(function (filter) {\n    return ifElse(isCompositeFilterDescriptor, serialize(encode), typedFormatter(encode))(filter);\n  }, join);\n};\n\nvar serializeFilter = function serializeFilter(_a, encode) {\n  var filter = _a.filter;\n\n  if (filter && filter.filters) {\n    var filters = serialize(encode)(filter);\n\n    if (filters.length) {\n      return ['filter', filters];\n    }\n  }\n\n  return null;\n};\n\nvar rules = function rules(state, encode) {\n  if (encode === void 0) {\n    encode = true;\n  }\n\n  return function (key) {\n    return {\n      \"aggregates\": serializeAggregates(state),\n      \"filter\": serializeFilter(state, encode),\n      \"group\": serializeGroup(state),\n      \"skip\": serializePage(state),\n      \"sort\": serializeSort(state),\n      \"take\": serializePageSize(state)\n    }[key];\n  };\n};\n/**\n * Converts a [`DataSourceRequestState`]({% slug api_kendo-data-query_datasourcerequeststate %}) into a string\n * that is comparable with the `DataSourceRequest` format in UI for ASP.NET MVC.\n *\n * @param {DataRequestState} state - The state that will be serialized.\n * @returns {string} - The serialized state.\n *\n * @example\n * {% platform_content angular %}\n * ```ts-no-run\n *  import {\n *      toDataSourceRequestString,\n *      translateDataSourceResultGroups,\n *      translateAggregateResults\n * } from '@progress/kendo-data-query';\n *\n * export class Service {\n *  private BASE_URL: string = '...';\n *\n *  constructor(private http: Http) { }\n *\n *  // Omitted for brevity...\n *\n *  private fetch(state: DataSourceRequestState): Observable<DataResult> {\n *   const queryStr = `${toDataSourceRequestString(state)}`; //serialize the state\n *   const hasGroups = state.group && state.group.length;\n *\n *   return this.http\n *       .get(`${this.BASE_URL}?${queryStr}`) //send the state to the server\n *       .map(response => response.json())\n *       .map(({Data, Total, AggregateResults}) => // process the response\n *           (<GridDataResult>{\n *               //if there are groups convert them to compatible format\n *               data: hasGroups ? translateDataSourceResultGroups(Data) : Data,\n *               total: Total,\n *               // convert the aggregates if such exists\n *               aggregateResult: translateAggregateResults(AggregateResults)\n *           })\n *       );\n *  }\n * }\n * ```\n * {% endplatform_content %}\n *\n * {% platform_content react %}\n * ```jsx-no-run\n * import React from 'react';\n * import { toDataSourceRequestString, translateDataSourceResultGroups } from '@progress/kendo-data-query';\n *\n * export function withState(WrappedGrid) {\n *     return class StatefullGrid extends React.Component {\n *         constructor(props) {\n *             super(props);\n *             this.state = { dataState: { skip: 0, take: 20 } };\n *         }\n *\n *         render() {\n *             return (\n *                 <WrappedGrid\n *                     filterable={true}\n *                     sortable={true}\n *                     pageable={{ pageSizes: true }}\n *                     {...this.props}\n *                     total={this.state.total}\n *                     data={this.state.data}\n *                     skip={this.state.dataState.skip}\n *                     pageSize={this.state.dataState.take}\n *                     filter={this.state.dataState.filter}\n *                     sort={this.state.dataState.sort}\n *                     dataStateChange={this.dataStateChange}\n *                 />\n *             );\n *         }\n *\n *         componentDidMount() {\n *             this.fetchData(this.state.dataState);\n *         }\n *\n *         dataStateChange = (changeEvent) => {\n *             this.setState({ dataState: changeEvent.data });\n *             this.fetchData(changeEvent.data);\n *         }\n *\n *         fetchData(dataState) {\n *             const queryStr = `${toDataSourceRequestString(dataState)}`; // Serialize the state\n *             const hasGroups = dataState.group && dataState.group.length;\n *\n *             const base_url = 'api/Products';\n *             const init = { method: 'GET', accept: 'application/json', headers: {} };\n *\n *             fetch(`${base_url}?${queryStr}`, init)\n *                 .then(response => response.json())\n *                 .then(({ data, total }) => {\n *                     this.setState({\n *                         data: hasGroups ? translateDataSourceResultGroups(data) : data,\n *                         total,\n *                         dataState\n *                     });\n *                 });\n *         }\n *     }\n * }\n * ```\n * {% endplatform_content %}\n */\n\n\nexport var toDataSourceRequestString = function toDataSourceRequestString(state) {\n  return toQueryString(Object.keys(state).map(rules(state)).filter(isPresent)).join('&');\n};\n/**\n * Converts a [`DataSourceRequestState`]({% slug api_kendo-data-query_datasourcerequeststate %}) into an object\n * that is compatible with the `DataSourceRequest` format in UI for ASP.NET MVC.\n *\n * @param {DataRequestState} state - The state that will be serialized.\n * @returns {any} - The serialized state.\n */\n\nexport var toDataSourceRequest = function toDataSourceRequest(state) {\n  return toObject(Object.keys(state).map(rules(state, false)).filter(isPresent));\n};","map":null,"metadata":{},"sourceType":"module"}