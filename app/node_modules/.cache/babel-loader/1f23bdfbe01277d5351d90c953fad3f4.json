{"ast":null,"code":"var _jsxFileName = \"/nfs/2018/e/egoodale/RDT/user_management_app/app/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport promise from 'redux-promise-middleware';\nimport * as reducers from './reducers';\nimport updateEpic from './epics';\nimport UserGrid from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createEpicMiddleware } from 'redux-observable';\nimport axios from 'axios';\nimport errorMiddleware from './middleware';\nvar rootReducer = combineReducers(reducers);\nvar epicMiddleware = createEpicMiddleware();\nexport default function configureStore() {\n  var createdStore = createStore(rootReducer, applyMiddleware(epicMiddleware, errorMiddleware, logger, promise()));\n  epicMiddleware.run(updateEpic);\n  return createdStore;\n}\nexport var store = configureStore();\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29\n  },\n  __self: this\n}, React.createElement(UserGrid, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n})), document.getElementById('root'));\nserviceWorker.unregister();\n/**\n * The following is an example of how to create an action that displays an error to the user,\n * simply uncomment the dispatch below to fire the action when the application starts.\n */\n\nexport var networkErrorAction = function networkErrorAction() {\n  return {\n    type: 'NETWORK_ERROR',\n\n    /* When you throw an error, always instantiate a new Error object with `new Error()` */\n    payload: new Promise(function (resolve, reject) {\n      axios.get('http//localhost:5000/notAnEndpoint').then(function (response) {\n        resolve(response.json().then(function (json) {\n          return json;\n        }));\n      }).catch(function (_ref) {\n        var response = _ref.response,\n            request = _ref.request,\n            message = _ref.message;\n        reject(response ? new Error(\"Server responded with status \".concat(response.status, \", \").concat(response.statusText)) : request ? new Error(\"No response from server: request details: \".concat(JSON.stringify(request))) : new Error(\"Error in request setup: \".concat(message)));\n      });\n    })\n  };\n}; //store.dispatch(networkErrorAction());","map":{"version":3,"sources":["/nfs/2018/e/egoodale/RDT/user_management_app/app/src/index.tsx"],"names":["React","ReactDOM","Provider","createStore","applyMiddleware","combineReducers","logger","promise","reducers","updateEpic","UserGrid","serviceWorker","createEpicMiddleware","axios","errorMiddleware","rootReducer","epicMiddleware","configureStore","createdStore","run","store","render","document","getElementById","unregister","networkErrorAction","type","payload","Promise","resolve","reject","get","then","response","json","catch","request","message","Error","status","statusText","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA6D,OAA7D;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AAEA,OAAOC,UAAP,MAAuB,SAAvB;AACA,OAAOC,QAAP,MAAqB,OAArB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,IAAMC,WAAW,GAAGV,eAAe,CAACG,QAAD,CAAnC;AACA,IAAMQ,cAAc,GAAGJ,oBAAoB,EAA3C;AAEA,eAAe,SAASK,cAAT,GAA0B;AACrC,MAAMC,YAAY,GAAGf,WAAW,CAC5BY,WAD4B,EAE5BX,eAAe,CAAEY,cAAF,EAAkBF,eAAlB,EAAmCR,MAAnC,EAA2CC,OAAO,EAAlD,CAFa,CAAhC;AAGAS,EAAAA,cAAc,CAACG,GAAf,CAAmBV,UAAnB;AACA,SAAOS,YAAP;AACH;AACD,OAAO,IAAME,KAAK,GAAGH,cAAc,EAA5B;AAEPhB,QAAQ,CAACoB,MAAT,CACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADJ,EAGiBE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAHjB;AAMAZ,aAAa,CAACa,UAAd;AAEA;;;;;AAKA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAY;AAC1CC,IAAAA,IAAI,EAAE,eADoC;;AAE1C;AACAC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCjB,MAAAA,KAAK,CAACkB,GAAN,CAAU,oCAAV,EACKC,IADL,CACU,UAACC,QAAD,EAAmB;AACrBJ,QAAAA,OAAO,CAACI,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAACE,IAAD;AAAA,iBACzBA,IADyB;AAAA,SAArB,CAAD,CAAP;AAGH,OALL,EAMKC,KANL,CAMW,gBAAyC;AAAA,YAAtCF,QAAsC,QAAtCA,QAAsC;AAAA,YAA5BG,OAA4B,QAA5BA,OAA4B;AAAA,YAAnBC,OAAmB,QAAnBA,OAAmB;AAC5CP,QAAAA,MAAM,CACFG,QAAQ,GAAG,IAAIK,KAAJ,wCAA0CL,QAAQ,CAACM,MAAnD,eAA8DN,QAAQ,CAACO,UAAvE,EAAH,GACJJ,OAAO,GAAG,IAAIE,KAAJ,qDAAuDG,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAvD,EAAH,GACH,IAAIE,KAAJ,mCAAqCD,OAArC,EAHN,CAAN;AAKH,OAZL;AAaH,KAdQ;AAHiC,GAAZ;AAAA,CAA3B,C,CAoBP","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport logger from 'redux-logger';\nimport promise from 'redux-promise-middleware'\nimport * as reducers from './reducers'\n\nimport updateEpic from './epics'\nimport UserGrid from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createEpicMiddleware } from 'redux-observable'\nimport axios from 'axios'\nimport errorMiddleware from './middleware'\n\nconst rootReducer = combineReducers(reducers)\nconst epicMiddleware = createEpicMiddleware();\n\nexport default function configureStore() { \n    const createdStore = createStore( \n        rootReducer,\n        applyMiddleware( epicMiddleware, errorMiddleware, logger, promise(),))\n    epicMiddleware.run(updateEpic)\n    return createdStore;\n}\nexport const store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <UserGrid />\n    </Provider>, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n\n/**\n * The following is an example of how to create an action that displays an error to the user,\n * simply uncomment the dispatch below to fire the action when the application starts.\n */\n\nexport const networkErrorAction = (): any => ({\n    type: 'NETWORK_ERROR',\n    /* When you throw an error, always instantiate a new Error object with `new Error()` */\n    payload: new Promise((resolve, reject) => {\n        axios.get('http//localhost:5000/notAnEndpoint')\n            .then((response: any) => {\n                resolve(response.json().then((json: any) => (\n                    json\n                )))\n            })\n            .catch(({ response, request, message }: any) => {\n                reject(\n                    response ? new Error(`Server responded with status ${response.status}, ${response.statusText}`) :\n                        request ? new Error(`No response from server: request details: ${JSON.stringify(request)}`) :\n                            new Error(`Error in request setup: ${message}`)\n                )\n            })\n    })\n})\n\n//store.dispatch(networkErrorAction());\n"]},"metadata":{},"sourceType":"module"}