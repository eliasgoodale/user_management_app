{"ast":null,"code":"import { greedy, sequence } from './parsing/combinators';\nimport { literal as _literal, mask as maskParser, rawLiteral, rawMask, token, unliteral, unmask } from './parsing/parsers';\n/**\n * @hidden\n */\n\nvar MaskingService =\n/** @class */\nfunction () {\n  function MaskingService() {\n    this.rules = {};\n    this.prompt = '_';\n    this.mask = '';\n    this.promptPlaceholder = ' ';\n    this.includeLiterals = false;\n    this.maskTokens = [];\n    this.unmaskTokens = [];\n    this.rawTokens = [];\n    this.validationTokens = [];\n  }\n\n  MaskingService.prototype.update = function (_a) {\n    var _b = _a.mask,\n        mask = _b === void 0 ? '' : _b,\n        _c = _a.prompt,\n        prompt = _c === void 0 ? '' : _c,\n        _d = _a.promptPlaceholder,\n        promptPlaceholder = _d === void 0 ? ' ' : _d,\n        _e = _a.rules,\n        rules = _e === void 0 ? {} : _e,\n        _f = _a.includeLiterals,\n        includeLiterals = _f === void 0 ? false : _f;\n    this.mask = mask;\n    this.prompt = prompt;\n    this.promptPlaceholder = promptPlaceholder;\n    this.rules = rules;\n    this.includeLiterals = includeLiterals;\n    this.tokenize();\n  };\n\n  MaskingService.prototype.validationValue = function (maskedValue) {\n    if (maskedValue === void 0) {\n      maskedValue = '';\n    }\n\n    var value = maskedValue;\n    sequence(this.validationTokens).run(maskedValue).fold(function (unmasked) {\n      value = unmasked.join('');\n    });\n    return value;\n  };\n\n  MaskingService.prototype.rawValue = function (maskedValue) {\n    if (maskedValue === void 0) {\n      maskedValue = '';\n    }\n\n    var value = maskedValue;\n\n    if (!this.rawTokens.length) {\n      return value;\n    }\n\n    sequence(this.rawTokens).run(maskedValue).fold(function (unmasked) {\n      value = unmasked.join('');\n    });\n    return value;\n  };\n  /**\n   * @hidden\n   */\n\n\n  MaskingService.prototype.maskRaw = function (rawValue) {\n    if (rawValue === void 0) {\n      rawValue = '';\n    }\n\n    var value = rawValue;\n\n    if (!this.maskTokens.length) {\n      return value;\n    }\n\n    sequence(this.maskTokens).run(rawValue).fold(function (masked) {\n      value = masked.join('');\n    });\n    return value;\n  };\n\n  MaskingService.prototype.maskInput = function (input, control, splitPoint) {\n    if (input.length < control.length) {\n      return this.maskRemoved(input, control, splitPoint);\n    }\n\n    return this.maskInserted(input, control, splitPoint);\n  };\n\n  MaskingService.prototype.maskInRange = function (pasted, oldValue, start, end) {\n    var value = '';\n    var selection = end;\n    var beforeChange = oldValue.split('').slice(0, start);\n    var afterChange = oldValue.split('').slice(end);\n    sequence(this.maskTokens.slice(start, end)).run(pasted).fold(function (masked) {\n      value = beforeChange.concat(masked).concat(afterChange).join('');\n    });\n    return {\n      selection: selection,\n      value: value\n    };\n  };\n\n  MaskingService.prototype.maskRemoved = function (input, control, splitPoint) {\n    var _this = this;\n\n    var value = '';\n    var selection = splitPoint;\n    var unchanged = input.split('').slice(splitPoint);\n    var changed = input.split('').slice(0, splitPoint).join('');\n    var take = this.maskTokens.length - (input.length - splitPoint);\n    sequence(this.maskTokens.slice(0, take)).run(changed, control).fold(function (masked) {\n      selection = _this.adjustPosition(masked, selection);\n      value = masked.concat(unchanged).join('');\n    });\n    return {\n      selection: selection,\n      value: value\n    };\n  };\n\n  MaskingService.prototype.adjustPosition = function (input, selection) {\n    var caretChar = input[selection];\n    var isLiteral = this.maskTokens[selection].isLiteral(caretChar);\n\n    if (!isLiteral && caretChar !== this.prompt) {\n      return selection + 1;\n    }\n\n    return selection;\n  };\n\n  MaskingService.prototype.maskInserted = function (input, control, splitPoint) {\n    var _this = this;\n\n    var value = '';\n    var selection = splitPoint;\n    var changed = input.slice(0, splitPoint);\n    sequence(this.unmaskTokens).run(changed, control).chain(function (unmasked) {\n      selection = unmasked.join('').length;\n      var unchanged = control.slice(selection);\n      return sequence(_this.maskTokens).run(unmasked.join('') + unchanged, control);\n    }).fold(function (masked) {\n      value = masked.join('');\n    });\n    return {\n      selection: selection,\n      value: value\n    };\n  };\n\n  Object.defineProperty(MaskingService.prototype, \"maskTokenCreator\", {\n    get: function get() {\n      var _a = this,\n          prompt = _a.prompt,\n          promptPlaceholder = _a.promptPlaceholder;\n\n      return {\n        literal: function literal(rule) {\n          return _literal(rule);\n        },\n        mask: function mask(rule) {\n          return maskParser({\n            prompt: prompt,\n            promptPlaceholder: promptPlaceholder\n          })(rule);\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskingService.prototype, \"unmaskTokenCreator\", {\n    get: function get() {\n      var _this = this;\n\n      return {\n        literal: function literal(rule) {\n          return unliteral(rule);\n        },\n        mask: function mask(rule) {\n          return unmask(_this.prompt)(rule);\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskingService.prototype, \"rawTokenCreator\", {\n    get: function get() {\n      var _a = this,\n          prompt = _a.prompt,\n          promptPlaceholder = _a.promptPlaceholder,\n          includeLiterals = _a.includeLiterals;\n\n      return {\n        literal: function literal(_) {\n          return rawLiteral(includeLiterals);\n        },\n        mask: function mask(_) {\n          return rawMask({\n            prompt: prompt,\n            promptPlaceholder: promptPlaceholder\n          });\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskingService.prototype, \"validationTokenCreator\", {\n    get: function get() {\n      var prompt = this.prompt;\n      return {\n        literal: function literal(_) {\n          return rawLiteral(false);\n        },\n        mask: function mask(_) {\n          return rawMask({\n            prompt: prompt,\n            promptPlaceholder: ''\n          });\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MaskingService.prototype.tokenize = function () {\n    var _this = this;\n\n    greedy(token(this.rules, this.maskTokenCreator)).run(this.mask).fold(function (tokens, _) {\n      _this.maskTokens = tokens;\n    });\n    greedy(token(this.rules, this.unmaskTokenCreator)).run(this.mask).fold(function (tokens, _) {\n      _this.unmaskTokens = tokens;\n    });\n    greedy(token(this.rules, this.rawTokenCreator)).run(this.mask).fold(function (tokens, _) {\n      _this.rawTokens = tokens;\n    });\n    greedy(token(this.rules, this.validationTokenCreator)).run(this.mask).fold(function (tokens, _) {\n      _this.validationTokens = tokens;\n    });\n  };\n\n  return MaskingService;\n}();\n\nexport { MaskingService };","map":null,"metadata":{},"sourceType":"module"}