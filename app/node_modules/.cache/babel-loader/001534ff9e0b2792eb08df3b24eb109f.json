{"ast":null,"code":"import { messages } from './messages';\n/**\n * @hidden\n */\n\nexport var filterLogicList = [{\n  text: 'grid.filterAndLogic',\n  value: 'and'\n}, {\n  text: 'grid.filterOrLogic',\n  value: 'or'\n}];\n/**\n * @hidden\n */\n\nexport var operators = {\n  'text': [{\n    text: 'grid.filterEqOperator',\n    value: 'eq'\n  }, {\n    text: 'grid.filterNotEqOperator',\n    value: 'neq'\n  }, {\n    text: 'grid.filterContainsOperator',\n    value: 'contains'\n  }, {\n    text: 'grid.filterNotContainsOperator',\n    value: 'doesnotcontain'\n  }, {\n    text: 'grid.filterStartsWithOperator',\n    value: 'startswith'\n  }, {\n    text: 'grid.filterEndsWithOperator',\n    value: 'endswith'\n  }, {\n    text: 'grid.filterIsNullOperator',\n    value: 'isnull'\n  }, {\n    text: 'grid.filterIsNotNullOperator',\n    value: 'isnotnull'\n  }, {\n    text: 'grid.filterIsEmptyOperator',\n    value: 'isempty'\n  }, {\n    text: 'grid.filterIsNotEmptyOperator',\n    value: 'isnotempty'\n  }],\n  'numeric': [{\n    text: 'grid.filterEqOperator',\n    value: 'eq'\n  }, {\n    text: 'grid.filterNotEqOperator',\n    value: 'neq'\n  }, {\n    text: 'grid.filterGteOperator',\n    value: 'gte'\n  }, {\n    text: 'grid.filterGtOperator',\n    value: 'gt'\n  }, {\n    text: 'grid.filterLteOperator',\n    value: 'lte'\n  }, {\n    text: 'grid.filterLtOperator',\n    value: 'lt'\n  }, {\n    text: 'grid.filterIsNullOperator',\n    value: 'isnull'\n  }, {\n    text: 'grid.filterIsNotNullOperator',\n    value: 'isnotnull'\n  }],\n  'date': [{\n    text: 'grid.filterEqOperator',\n    value: 'eq'\n  }, {\n    text: 'grid.filterNotEqOperator',\n    value: 'neq'\n  }, {\n    text: 'grid.filterAfterOrEqualOperator',\n    value: 'gte'\n  }, {\n    text: 'grid.filterAfterOperator',\n    value: 'gt'\n  }, {\n    text: 'grid.filterBeforeOperator',\n    value: 'lt'\n  }, {\n    text: 'grid.filterBeforeOrEqualOperator',\n    value: 'lte'\n  }, {\n    text: 'grid.filterIsNullOperator',\n    value: 'isnull'\n  }, {\n    text: 'grid.filterIsNotNullOperator',\n    value: 'isnotnull'\n  }],\n  'boolean': [{\n    text: 'grid.filterBooleanAll',\n    value: ''\n  }, {\n    text: 'grid.filterIsTrue',\n    value: true\n  }, {\n    text: 'grid.filterIsFalse',\n    value: false\n  }]\n};\n/**\n * @hidden\n */\n\nexport var IsUnaryFilter = function IsUnaryFilter(operator) {\n  return operator === 'isnull' || operator === 'isnotnull' || operator === 'isempty' || operator === 'isnotempty';\n};\n/**\n * @hidden\n */\n\nexport var operatorMap = function operatorMap(iterable, service) {\n  return iterable.map(function (operator) {\n    return {\n      text: service.toLanguageString(operator.text, messages[operator.text]),\n      operator: operator.value\n    };\n  });\n};\n/**\n * @hidden\n */\n\nexport var defaultOperators = {\n  text: 'contains',\n  numeric: 'eq',\n  date: 'eq',\n  boolean: 'eq'\n};\n/**\n * @hidden\n */\n\nexport var defaultHideSecondFilter = {\n  text: false,\n  numeric: false,\n  date: false,\n  boolean: true\n};\n/**\n * @hidden\n */\n\nexport var cellInputChange = function cellInputChange(value, e, props) {\n  var operator = props.operator;\n\n  switch (props.filterType) {\n    case 'numeric':\n      if (!operator || IsUnaryFilter(operator)) {\n        // change the operator to default\n        operator = defaultOperators.numeric;\n      }\n\n      if (value === null && operator === defaultOperators.numeric) {\n        // clear only the default operator\n        operator = '';\n      }\n\n      break;\n\n    case 'date':\n      if (!operator || IsUnaryFilter(operator)) {\n        operator = defaultOperators.date;\n      }\n\n      if (value === null && operator === defaultOperators.date) {\n        operator = '';\n      }\n\n      break;\n\n    case 'text':\n      if (!operator || IsUnaryFilter(operator)) {\n        operator = defaultOperators.text;\n      }\n\n      if (!value && operator === defaultOperators.text) {\n        operator = '';\n      }\n\n      break;\n\n    default:\n      return;\n  }\n\n  props.onChange({\n    value: value,\n    operator: operator,\n    syntheticEvent: e\n  });\n};\n/**\n * @hidden\n */\n\nexport var cellBoolDropdownChange = function cellBoolDropdownChange(event, onChange) {\n  var item = event.target.value;\n  onChange({\n    value: item.operator,\n    operator: item.operator === '' ? '' : defaultOperators.boolean,\n    syntheticEvent: event.syntheticEvent\n  });\n};\n/**\n * @hidden\n */\n\nexport var cellOperatorChange = function cellOperatorChange(event, currentValue, onChange) {\n  var value = currentValue;\n  var item = event.target.value;\n\n  if (!event.target.state.opened) {\n    return;\n  }\n\n  if (IsUnaryFilter(item.operator)) {\n    // clear the value to avoid confusion on what is filtered\n    value = null;\n  }\n\n  onChange({\n    value: value,\n    operator: item.operator,\n    syntheticEvent: event.syntheticEvent\n  });\n};","map":null,"metadata":{},"sourceType":"module"}