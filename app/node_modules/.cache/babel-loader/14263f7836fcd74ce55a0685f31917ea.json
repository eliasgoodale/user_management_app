{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\nimport { DatePicker } from '@progress/kendo-react-dateinputs';\nimport { messages, filterClearButton } from '../messages';\nimport { registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';\nimport { operators, operatorMap, cellBoolDropdownChange, cellInputChange, cellOperatorChange } from '../filterCommon';\nexport { operators };\n\nvar GridFilterCell =\n/** @class */\nfunction (_super) {\n  __extends(GridFilterCell, _super);\n\n  function GridFilterCell(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.inputChange = _this.inputChange.bind(_this);\n    _this.clear = _this.clear.bind(_this);\n    _this.operatorChange = _this.operatorChange.bind(_this);\n    _this.boolDropdownChange = _this.boolDropdownChange.bind(_this);\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  GridFilterCell.prototype.render = function () {\n    var _this = this;\n\n    var localizationService = provideLocalizationService(this);\n    var data = operatorMap(operators[this.props.filterType], localizationService);\n    var value = data.find(function (item) {\n      return item.operator === _this.props.operator;\n    }) || null;\n    var defaultRendering = React.createElement(\"div\", {\n      className: \"k-filtercell\"\n    }, React.createElement(\"div\", {\n      className: \"k-filtercell-wrapper\"\n    }, this.filterComponent(this.props.filterType, this.props.value, localizationService), React.createElement(\"div\", {\n      className: \"k-filtercell-operator\"\n    }, this.props.filterType !== 'boolean' && React.createElement(DropDownList, {\n      value: value,\n      onChange: this.operatorChange,\n      className: \"k-dropdown-operator\",\n      iconClassName: \"k-i-filter k-icon\",\n      data: data,\n      textField: \"text\",\n      popupSettings: {\n        width: ''\n      }\n    }), React.createElement(\"button\", {\n      className:\n      /* button is always visible if there is either value or operator */\n      !(this.props.value === null || this.props.value === '') || this.props.operator ? 'k-button k-button-icon k-clear-button-visible' : 'k-button k-button-icon',\n      title: localizationService.toLanguageString(filterClearButton, messages[filterClearButton]),\n      type: \"button\",\n      onClick: this.clear\n    }, React.createElement(\"span\", {\n      className: \"k-icon k-i-filter-clear\"\n    })))));\n\n    if (this.props.render) {\n      return this.props.render.call(undefined, defaultRendering, this.props);\n    }\n\n    return defaultRendering;\n  };\n\n  GridFilterCell.prototype.inputChange = function (value, e) {\n    cellInputChange(value, e, this.props);\n  };\n\n  GridFilterCell.prototype.operatorChange = function (event) {\n    cellOperatorChange(event, this.props.value, this.props.onChange);\n  };\n\n  GridFilterCell.prototype.boolDropdownChange = function (event) {\n    cellBoolDropdownChange(event, this.props.onChange);\n  };\n\n  GridFilterCell.prototype.clear = function (e) {\n    e.preventDefault();\n    this.props.onChange({\n      value: '',\n      operator: '',\n      syntheticEvent: e\n    });\n  };\n\n  GridFilterCell.prototype.filterComponent = function (filterType, value, localizationService) {\n    var _this = this;\n\n    switch (filterType) {\n      case 'numeric':\n        return React.createElement(NumericTextBox, {\n          value: value,\n          onChange: function onChange(e) {\n            _this.inputChange(e.value, e.syntheticEvent);\n          }\n        });\n\n      case 'date':\n        return React.createElement(DatePicker, {\n          value: value,\n          onChange: function onChange(e) {\n            _this.inputChange(e.value, e.syntheticEvent);\n          }\n        });\n\n      case 'boolean':\n        var data = operatorMap(operators.boolean, localizationService);\n\n        var noFilterSet_1 = function noFilterSet_1(filter) {\n          return filter === null || filter === undefined;\n        };\n\n        return React.createElement(DropDownList, {\n          onChange: this.boolDropdownChange,\n          value: data.find(function (item) {\n            return item.operator === (noFilterSet_1(value) ? '' : value);\n          }),\n          data: data,\n          textField: \"text\"\n        });\n\n      default:\n        return React.createElement(\"input\", {\n          className: \"k-textbox\",\n          value: value || '',\n          onChange: function onChange(e) {\n            _this.inputChange(e.target.value, e);\n          }\n        });\n    }\n  };\n\n  return GridFilterCell;\n}(React.Component);\n\nexport { GridFilterCell };\nregisterForLocalization(GridFilterCell);","map":null,"metadata":{},"sourceType":"module"}