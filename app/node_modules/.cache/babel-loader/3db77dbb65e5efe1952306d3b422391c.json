{"ast":null,"code":"import { exec, map, aggregatesCombinator, expandAggregates } from '../transducers';\nvar identity = map(function (x) {\n  return x;\n});\n/**\n * Applies the specified [`AggregateDescriptors`]({% slug api_kendo-data-query_aggregatedescriptor %}) to the data.\n * Returns an [`AggregateResult`]({% slug api_kendo-data-query_aggregateresult %}) instance.\n *\n * @example\n * ```ts-no-run\n * const data = [\n *    { unitPrice: 23, unitsInStock: 21 },\n *    { unitPrice: 10, unitsInStock: 12 },\n *    { unitPrice: 20, unitsInStock: 33 }\n * ];\n *\n * const result = aggregateBy(data, [\n *   { aggregate: \"sum\", field: \"unitPrice\" },\n *   { aggregate: \"sum\", field: \"unitsInStock\" }\n * ]);\n *\n * //output:\n * // {\n * //     \"unitPrice\": { \"sum\": 53 },\n * //     \"unitsInStock\": { \"sum\": 66 }\n * // }\n * ```\n * @param {T[]} data - The data on which the calculation will be executed.\n * @param {AggregateDescriptor[]} descriptors - The aggregate operations that will be executed.\n * @param {any} transformers - For internal use.\n * @returns {AggregateResult} - The aggregated result.\n * For more information, refer to the [`aggregateresult`]({% slug api_kendo-data-query_aggregateresult %}) configuration.\n */\n\nexport var aggregateBy = function aggregateBy(data, descriptors, transformers) {\n  if (descriptors === void 0) {\n    descriptors = [];\n  }\n\n  if (transformers === void 0) {\n    transformers = identity;\n  }\n\n  var initialValue = {};\n\n  if (!descriptors.length) {\n    return initialValue;\n  }\n\n  var result = exec(transformers(aggregatesCombinator(descriptors)), initialValue, data);\n  return expandAggregates(result);\n};","map":null,"metadata":{},"sourceType":"module"}