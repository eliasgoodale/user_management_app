{"ast":null,"code":"import _classCallCheck from \"/nfs/2018/e/egoodale/RDT/user_management_app/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/nfs/2018/e/egoodale/RDT/user_management_app/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/nfs/2018/e/egoodale/RDT/user_management_app/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/nfs/2018/e/egoodale/RDT/user_management_app/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/nfs/2018/e/egoodale/RDT/user_management_app/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/nfs/2018/e/egoodale/RDT/user_management_app/app/src/App.tsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '@progress/kendo-theme-default/dist/all.css';\nimport * as UserActionGroup from './actions';\nimport { Grid, GridColumn as Column, GridToolbar } from '@progress/kendo-react-grid';\nimport { orderBy, filterBy } from '@progress/kendo-data-query';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { AlertDialog, CheckboxCell, PasswordModal, ToolbarButtons } from './components';\n\n/**\n * Comment out the the columns you dont want, add ones you do.\n * The rules are only that the title is a string, and the filter \n * corresponds to the type of the field. The field name, and array key\n * are passed as the property key.\n */\nvar header = {\n  //id: { title: 'ID', filter: 'text' },\n  username: {\n    title: 'Username',\n    filter: 'text'\n  },\n  firstName: {\n    title: 'First Name',\n    filter: 'text'\n  },\n  lastName: {\n    title: 'Last Name',\n    filter: 'text'\n  },\n  isActive: {\n    title: 'Active',\n    filter: 'boolean',\n    cell: CheckboxCell\n  },\n  isEntryAdmin: {\n    title: 'Entry Admin',\n    filter: 'boolean',\n    cell: CheckboxCell\n  },\n  isListAdmin: {\n    title: 'List Admin',\n    filter: 'boolean',\n    cell: CheckboxCell\n  },\n  isLocationManager: {\n    title: 'Location Manager',\n    filter: 'boolean',\n    cell: CheckboxCell\n  },\n  isOperatorAdmin: {\n    title: 'Operator Admin',\n    filter: 'boolean',\n    cell: CheckboxCell\n  },\n  isUserAdmin: {\n    title: 'User Admin',\n    filter: 'boolean',\n    cell: CheckboxCell\n  }\n  /**\n   * Controls the css properties of the container components\n   */\n\n};\nvar styles = {\n  paper: {\n    padding: 8 * 3,\n    elevation: 10,\n    maxHeight: 750\n  },\n  grid: {\n    maxHeight: 750\n  }\n};\n\nvar UserGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserGrid, _Component);\n\n  function UserGrid(props) {\n    var _this;\n\n    _classCallCheck(this, UserGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserGrid).call(this, props));\n    _this._columns = _this.createColumns(header);\n    return _this;\n  }\n\n  _createClass(UserGrid, [{\n    key: \"createColumns\",\n    value: function createColumns(header) {\n      return Object.keys(header).map(function (key) {\n        var _header$key = header[key],\n            title = _header$key.title,\n            filter = _header$key.filter;\n        var hasCheckboxCell = filter === 'boolean';\n        /**\n         * Boolean cells have an applicable override attached in the header.\n         * You can change whether this component is displayed as default, or with\n         * the cell override, by commenting/uncommenting the cell property respectively. \n         * CheckboxCell is not finished, but it works for getting the feel \n         * of how it would look. If you like it, I can get that 100%.\n         */\n\n        return hasCheckboxCell ? React.createElement(Column, {\n          key: key,\n          field: key,\n          title: title,\n          filter: filter,\n          resizable: true,\n          editor: \"boolean\" // cell={(props) => <CheckboxCell {...props}/>}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }) : React.createElement(Column, {\n          key: key,\n          field: key,\n          title: title,\n          resizable: true,\n          filter: filter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          filter = _this$props.filter,\n          inEdit = _this$props.inEdit,\n          sort = _this$props.sort,\n          getAllUsers = _this$props.getAllUsers,\n          onSortChange = _this$props.onSortChange,\n          onRowClick = _this$props.onRowClick,\n          onItemChange = _this$props.onItemChange,\n          onFilterChange = _this$props.onFilterChange;\n      /**\n       * This function adds the inEdit:boolean property to the user \n       * whose id matches the id of inEdit and sorts/filters the data  when\n       * props.sort:SortDescriptor and props.filter:CompositeFilterDescriptor\n       * have at least one element.\n       */\n\n      var tableData = orderBy(filterBy(data.map(function (user) {\n        return Object.assign({\n          inEdit: user.id === inEdit\n        }, user);\n      }), filter), sort);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(AlertDialog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(PasswordModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(Paper, {\n        style: styles.paper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        style: styles.grid,\n        data: tableData,\n        sort: sort,\n        filter: filter,\n        editField: \"inEdit\",\n        onSortChange: onSortChange,\n        onRowClick: onRowClick,\n        onItemChange: onItemChange,\n        onFilterChange: onFilterChange,\n        filterable: true,\n        resizable: true,\n        sortable: true,\n        reorderable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(GridToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(ToolbarButtons, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      })), [this._columns])), React.createElement(Button, {\n        onClick: getAllUsers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Get Data\"));\n    }\n  }]);\n\n  return UserGrid;\n}(Component);\n/**\n * The mapStateToProps method receives the value of store.getState() as its\n * argument. The key corresponds to the name of the props key in the component.\n * For example, data: state.editor.data, provides the value of state.editor.data,\n * to props.data in the component (props.data = state.editor.data). This is where\n * you can pass what state the component receives from the Provider as props.\n */\n\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.editor.data,\n    inEdit: state.editor.inEdit,\n    inCreateMode: state.editor.inCreateMode,\n    sort: state.sort,\n    filter: state.filter\n  };\n}\n/**\n * The mapDispatchToProps function provides the action creators available to\n * the component as props. A method name in the UserGrid component \n * matching one of the keys below is an alias for firing that action creator\n * and dispatching it to the reducers.\n */\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSortChange: function onSortChange(e) {\n      dispatch(UserActionGroup.changeSort(e.sort));\n    },\n    onRowClick: function onRowClick(e) {\n      dispatch(UserActionGroup.selectRow(e.dataItem.id));\n    },\n    onItemChange: function onItemChange(e) {\n      dispatch(UserActionGroup.changeUserData(e.dataItem.id, e.field, e.value));\n    },\n    onFilterChange: function onFilterChange(e) {\n      dispatch(UserActionGroup.changeFilter(e.filter));\n    },\n    syncData: function syncData(data) {\n      dispatch(UserActionGroup.syncData(data));\n    },\n    getAllUsers: function getAllUsers() {\n      return dispatch(UserActionGroup.getAllUsers());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserGrid);","map":{"version":3,"sources":["/nfs/2018/e/egoodale/RDT/user_management_app/app/src/App.tsx"],"names":["React","Component","connect","UserActionGroup","Grid","GridColumn","Column","GridToolbar","orderBy","filterBy","Button","Paper","AlertDialog","CheckboxCell","PasswordModal","ToolbarButtons","header","username","title","filter","firstName","lastName","isActive","cell","isEntryAdmin","isListAdmin","isLocationManager","isOperatorAdmin","isUserAdmin","styles","paper","padding","elevation","maxHeight","grid","UserGrid","props","_columns","createColumns","Object","keys","map","key","hasCheckboxCell","data","inEdit","sort","getAllUsers","onSortChange","onRowClick","onItemChange","onFilterChange","tableData","user","assign","id","mapStateToProps","state","editor","inCreateMode","mapDispatchToProps","dispatch","e","changeSort","selectRow","dataItem","changeUserData","field","value","changeFilter","syncData"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,4CAAP;AACA,OAAO,KAAKC,eAAZ,MAAiC,WAAjC;AAGA,SACEC,IADF,EAEEC,UAAU,IAAIC,MAFhB,EAOEC,WAPF,QAOqB,4BAPrB;AASA,SAGEC,OAHF,EAIEC,QAJF,QAIkB,4BAJlB;AAMA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SACEC,WADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,cAJF,QAKS,cALT;;AAqBA;;;;;;AAOA,IAAMC,MAAM,GAAG;AACb;AACAC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,KAAK,EAAE,UAAT;AAAqBC,IAAAA,MAAM,EAAE;AAA7B,GAFG;AAGbC,EAAAA,SAAS,EAAE;AAAEF,IAAAA,KAAK,EAAE,YAAT;AAAuBC,IAAAA,MAAM,EAAE;AAA/B,GAHE;AAIbE,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,KAAK,EAAE,WAAT;AAAsBC,IAAAA,MAAM,EAAE;AAA9B,GAJG;AAKbG,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,KAAK,EAAE,QADC;AAERC,IAAAA,MAAM,EAAE,SAFA;AAGRI,IAAAA,IAAI,EAAEV;AAHE,GALG;AAUbW,EAAAA,YAAY,EAAE;AACZN,IAAAA,KAAK,EAAE,aADK;AAEZC,IAAAA,MAAM,EAAE,SAFI;AAGZI,IAAAA,IAAI,EAAEV;AAHM,GAVD;AAebY,EAAAA,WAAW,EAAE;AACXP,IAAAA,KAAK,EAAE,YADI;AAEXC,IAAAA,MAAM,EAAE,SAFG;AAGXI,IAAAA,IAAI,EAAEV;AAHK,GAfA;AAoBba,EAAAA,iBAAiB,EAAE;AACjBR,IAAAA,KAAK,EAAE,kBADU;AAEjBC,IAAAA,MAAM,EAAE,SAFS;AAGjBI,IAAAA,IAAI,EAAEV;AAHW,GApBN;AAyBbc,EAAAA,eAAe,EAAE;AACfT,IAAAA,KAAK,EAAE,gBADQ;AAEfC,IAAAA,MAAM,EAAE,SAFO;AAGfI,IAAAA,IAAI,EAACV;AAHU,GAzBJ;AA8Bbe,EAAAA,WAAW,EAAE;AACXV,IAAAA,KAAK,EAAE,YADI;AAEXC,IAAAA,MAAM,EAAE,SAFG;AAGXI,IAAAA,IAAI,EAAEV;AAHK;AAOf;;;;AArCe,CAAf;AAwCA,IAAMgB,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,IAAI,CADR;AAELC,IAAAA,SAAS,EAAE,EAFN;AAGLC,IAAAA,SAAS,EAAE;AAHN,GADM;AAMbC,EAAAA,IAAI,EAAE;AACJD,IAAAA,SAAS,EAAE;AADP;AANO,CAAf;;IAWME,Q;;;;;AAIJ,oBAAoBC,KAApB,EAA0C;AAAA;;AAAA;;AACxC,kFAAMA,KAAN;AACA,UAAKC,QAAL,GAAgB,MAAKC,aAAL,CAAmBtB,MAAnB,CAAhB;AAFwC;AAGzC;;;;kCAEaA,M,EAA4B;AACxC,aAAOuB,MAAM,CAACC,IAAP,CAAYxB,MAAZ,EAAoByB,GAApB,CAAwB,UAACC,GAAD,EAAS;AAAA,0BACV1B,MAAM,CAAC0B,GAAD,CADI;AAAA,YAC5BxB,KAD4B,eAC5BA,KAD4B;AAAA,YACrBC,MADqB,eACrBA,MADqB;AAEpC,YAAMwB,eAAe,GAAGxB,MAAM,KAAK,SAAnC;AACF;;;;;;;;AAOA,eAAOwB,eAAe,GACpB,oBAAC,MAAD;AACE,UAAA,GAAG,EAAED,GADP;AAEE,UAAA,KAAK,EAAEA,GAFT;AAGE,UAAA,KAAK,EAAExB,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAKE,UAAA,SAAS,MALX;AAME,UAAA,MAAM,EAAC,SANT,CAOE;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADoB,GAUpB,oBAAC,MAAD;AACE,UAAA,GAAG,EAAEuB,GADP;AAEE,UAAA,KAAK,EAAEA,GAFT;AAGE,UAAA,KAAK,EAAExB,KAHT;AAIE,UAAA,SAAS,MAJX;AAKE,UAAA,MAAM,EAAEC,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVF;AAiBD,OA3BM,CAAP;AA4BD;;;6BACQ;AAAA,wBAac,KAAKiB,KAbnB;AAAA,UAGLQ,IAHK,eAGLA,IAHK;AAAA,UAILzB,MAJK,eAILA,MAJK;AAAA,UAKL0B,MALK,eAKLA,MALK;AAAA,UAMLC,IANK,eAMLA,IANK;AAAA,UASLC,WATK,eASLA,WATK;AAAA,UAULC,YAVK,eAULA,YAVK;AAAA,UAWLC,UAXK,eAWLA,UAXK;AAAA,UAYLC,YAZK,eAYLA,YAZK;AAAA,UAaLC,cAbK,eAaLA,cAbK;AAeL;;;;;;;AAOA,UAAMC,SAAS,GACf5C,OAAO,CACLC,QAAQ,CACNmC,IAAI,CAACH,GAAL,CACE,UAACY,IAAD;AAAA,eAAgBd,MAAM,CAACe,MAAP,CAAc;AAAET,UAAAA,MAAM,EAAEQ,IAAI,CAACE,EAAL,KAAYV;AAAtB,SAAd,EAA6CQ,IAA7C,CAAhB;AAAA,OADF,CADM,EAGFlC,MAHE,CADH,EAKG2B,IALH,CADP;AAQF,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEjB,MAAM,CAACC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACK,IAApB;AACE,QAAA,IAAI,EAAEkB,SADR;AAEE,QAAA,IAAI,EAAEN,IAFR;AAGE,QAAA,MAAM,EAAE3B,MAHV;AAIE,QAAA,SAAS,EAAC,QAJZ;AAKE,QAAA,YAAY,EAAE6B,YALhB;AAME,QAAA,UAAU,EAAEC,UANd;AAOE,QAAA,YAAY,EAAEC,YAPhB;AAQE,QAAA,cAAc,EAAEC,cARlB;AASE,QAAA,UAAU,MATZ;AAUE,QAAA,SAAS,MAVX;AAWE,QAAA,QAAQ,MAXV;AAYE,QAAA,WAAW,MAZb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAaA,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAbA,EAgBG,CAAE,KAAKd,QAAP,CAhBH,CADA,CAHF,EAuBE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEU,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvBF,CADF;AA6BD;;;;EAlGoB9C,S;AAqGvB;;;;;;;;;AAQA,SAASuD,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,SAAO;AACLb,IAAAA,IAAI,EAAEa,KAAK,CAACC,MAAN,CAAad,IADd;AAELC,IAAAA,MAAM,EAAEY,KAAK,CAACC,MAAN,CAAab,MAFhB;AAGLc,IAAAA,YAAY,EAAEF,KAAK,CAACC,MAAN,CAAaC,YAHtB;AAILb,IAAAA,IAAI,EAAEW,KAAK,CAACX,IAJP;AAKL3B,IAAAA,MAAM,EAAEsC,KAAK,CAACtC;AALT,GAAP;AAOD;AAED;;;;;;;;AAOA,SAASyC,kBAAT,CAA4BC,QAA5B,EAA2C;AACzC,SAAO;AACLb,IAAAA,YAAY,EAAE,sBAACc,CAAD,EAA4B;AACxCD,MAAAA,QAAQ,CAAC1D,eAAe,CAAC4D,UAAhB,CAA2BD,CAAC,CAAChB,IAA7B,CAAD,CAAR;AACD,KAHI;AAILG,IAAAA,UAAU,EAAE,oBAACa,CAAD,EAA0B;AACpCD,MAAAA,QAAQ,CAAC1D,eAAe,CAAC6D,SAAhB,CAA0BF,CAAC,CAACG,QAAF,CAAWV,EAArC,CAAD,CAAR;AACD,KANI;AAOLL,IAAAA,YAAY,EAAE,sBAACY,CAAD,EAA4B;AACxCD,MAAAA,QAAQ,CAAC1D,eAAe,CAAC+D,cAAhB,CAA+BJ,CAAC,CAACG,QAAF,CAAWV,EAA1C,EAA8CO,CAAC,CAACK,KAAhD,EAAuDL,CAAC,CAACM,KAAzD,CAAD,CAAR;AACD,KATI;AAULjB,IAAAA,cAAc,EAAE,wBAACW,CAAD,EAA8B;AAC5CD,MAAAA,QAAQ,CAAC1D,eAAe,CAACkE,YAAhB,CAA6BP,CAAC,CAAC3C,MAA/B,CAAD,CAAR;AACD,KAZI;AAaLmD,IAAAA,QAAQ,EAAE,kBAAC1B,IAAD,EAAkB;AAC1BiB,MAAAA,QAAQ,CAAC1D,eAAe,CAACmE,QAAhB,CAAyB1B,IAAzB,CAAD,CAAR;AACD,KAfI;AAgBLG,IAAAA,WAAW,EAAE;AAAA,aAAMc,QAAQ,CAAC1D,eAAe,CAAC4C,WAAhB,EAAD,CAAd;AAAA;AAhBR,GAAP;AAkBD;;AAED,eAAe7C,OAAO,CAACsD,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CzB,QAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport '@progress/kendo-theme-default/dist/all.css'\nimport * as UserActionGroup from './actions'\nimport { User, GridState} from './types'\n\nimport {\n  Grid,\n  GridColumn as Column,\n  GridSortChangeEvent,\n  GridRowClickEvent,\n  GridItemChangeEvent, \n  GridFilterChangeEvent,\n  GridToolbar } from '@progress/kendo-react-grid'\n\nimport { \n  CompositeFilterDescriptor, \n  SortDescriptor, \n  orderBy, \n  filterBy } from '@progress/kendo-data-query';\n\nimport Button from '@material-ui/core/Button'\nimport Paper from '@material-ui/core/Paper'\nimport { \n  AlertDialog,\n  CheckboxCell,\n  PasswordModal,\n  ToolbarButtons, \n  } from './components'\n\ninterface UserGridProps {\n  data: User[];\n  sort: SortDescriptor[];\n  filter: CompositeFilterDescriptor;\n  inEdit: string | null;\n  inCreateMode: boolean;\n  onSortChange(e: GridSortChangeEvent): void;\n  onRowClick(e: GridRowClickEvent): void;\n  onItemChange(e: GridItemChangeEvent): void;\n  onFilterChange(e: GridFilterChangeEvent): void;\n  getAllUsers(): void;\n  syncData(data: User[]): void;\n}\n\n/**\n * Comment out the the columns you dont want, add ones you do.\n * The rules are only that the title is a string, and the filter \n * corresponds to the type of the field. The field name, and array key\n * are passed as the property key.\n */\n\nconst header = {\n  //id: { title: 'ID', filter: 'text' },\n  username: { title: 'Username', filter: 'text' },\n  firstName: { title: 'First Name', filter: 'text' },\n  lastName: { title: 'Last Name', filter: 'text'},\n  isActive: { \n    title: 'Active',\n    filter: 'boolean',\n    cell: CheckboxCell,\n  },\n  isEntryAdmin: { \n    title: 'Entry Admin',\n    filter: 'boolean',\n    cell: CheckboxCell,\n  },\n  isListAdmin: { \n    title: 'List Admin',\n    filter: 'boolean',\n    cell: CheckboxCell,\n  },\n  isLocationManager: { \n    title: 'Location Manager',\n    filter: 'boolean',\n    cell: CheckboxCell,\n  },\n  isOperatorAdmin: { \n    title: 'Operator Admin',\n    filter: 'boolean',\n    cell:CheckboxCell,\n  },\n  isUserAdmin: { \n    title: 'User Admin',\n    filter: 'boolean',\n    cell: CheckboxCell,\n  },\n}\n\n/**\n * Controls the css properties of the container components\n */\nconst styles = {\n  paper: {\n    padding: 8 * 3,\n    elevation: 10,\n    maxHeight: 750,\n  },\n  grid: {\n    maxHeight: 750\n  }\n}\n\nclass UserGrid extends Component<UserGridProps, {}> {\n\n  private _columns: JSX.Element[];\n\n  public constructor (props: UserGridProps) {\n    super(props);\n    this._columns = this.createColumns(header)\n  }\n\n  createColumns(header: any): JSX.Element[] {\n    return Object.keys(header).map((key) => {\n        const { title, filter } = header[key]\n        const hasCheckboxCell = filter === 'boolean'\n      /**\n       * Boolean cells have an applicable override attached in the header.\n       * You can change whether this component is displayed as default, or with\n       * the cell override, by commenting/uncommenting the cell property respectively. \n       * CheckboxCell is not finished, but it works for getting the feel \n       * of how it would look. If you like it, I can get that 100%.\n       */\n      return hasCheckboxCell ? \n        <Column \n          key={key}\n          field={key}\n          title={title}\n          filter={filter}\n          resizable\n          editor=\"boolean\"\n          // cell={(props) => <CheckboxCell {...props}/>}\n          /> :\n        <Column \n          key={key} \n          field={key} \n          title={title}\n          resizable\n          filter={filter}\n          />  \n    })\n  }\n  render() {\n    const {\n      /* State from mapStateToProps */\n      data,\n      filter,\n      inEdit,\n      sort,\n\n      /* Action Creators from mapDispatchToProps */\n      getAllUsers,\n      onSortChange,\n      onRowClick,\n      onItemChange,\n      onFilterChange } = this.props\n\n      /**\n       * This function adds the inEdit:boolean property to the user \n       * whose id matches the id of inEdit and sorts/filters the data  when\n       * props.sort:SortDescriptor and props.filter:CompositeFilterDescriptor\n       * have at least one element.\n       */\n\n      const tableData = \n      orderBy(\n        filterBy(\n          data.map(\n            (user: User) => Object.assign({ inEdit: user.id === inEdit}, user)),\n              filter),\n                sort);\n\n    return (\n      <React.Fragment>\n        <AlertDialog/>\n        <PasswordModal/>\n        <Paper style={styles.paper}>\n        <Grid style={styles.grid}\n          data={tableData}\n          sort={sort}\n          filter={filter}\n          editField=\"inEdit\"\n          onSortChange={onSortChange}\n          onRowClick={onRowClick}\n          onItemChange={onItemChange}\n          onFilterChange={onFilterChange}\n          filterable\n          resizable\n          sortable\n          reorderable>\n        <GridToolbar>\n          <ToolbarButtons/>\n        </GridToolbar>\n          {[ this._columns]}\n        </Grid>\n        </Paper>\n        <Button onClick={getAllUsers}>\n          Get Data \n        </Button>\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * The mapStateToProps method receives the value of store.getState() as its\n * argument. The key corresponds to the name of the props key in the component.\n * For example, data: state.editor.data, provides the value of state.editor.data,\n * to props.data in the component (props.data = state.editor.data). This is where\n * you can pass what state the component receives from the Provider as props.\n */\n\nfunction mapStateToProps(state: GridState) {\n  return {\n    data: state.editor.data,\n    inEdit: state.editor.inEdit,\n    inCreateMode: state.editor.inCreateMode,\n    sort: state.sort,\n    filter: state.filter,\n  }\n}\n\n/**\n * The mapDispatchToProps function provides the action creators available to\n * the component as props. A method name in the UserGrid component \n * matching one of the keys below is an alias for firing that action creator\n * and dispatching it to the reducers.\n */\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    onSortChange: (e: GridSortChangeEvent) => {\n      dispatch(UserActionGroup.changeSort(e.sort))\n    },\n    onRowClick: (e: GridRowClickEvent) => {\n      dispatch(UserActionGroup.selectRow(e.dataItem.id))\n    },\n    onItemChange: (e: GridItemChangeEvent) => {\n      dispatch(UserActionGroup.changeUserData(e.dataItem.id, e.field, e.value))\n    },\n    onFilterChange: (e: GridFilterChangeEvent) => {\n      dispatch(UserActionGroup.changeFilter(e.filter))\n    },\n    syncData: (data: User[]) => {\n      dispatch(UserActionGroup.syncData(data));\n    },\n    getAllUsers: () => dispatch(UserActionGroup.getAllUsers()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserGrid);\n"]},"metadata":{},"sourceType":"module"}