{"ast":null,"code":"import { Result, ResultType } from './result';\nimport { Stream } from './stream';\n\nvar toArray = function toArray(value) {\n  return (value || '').split('');\n};\n\nvar ESCAPE_CHARACTER = '\\\\';\n/**\n * @hidden\n */\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser(parse) {\n    this.parse = parse;\n  }\n\n  Parser.prototype.run = function (input, control) {\n    if (control === void 0) {\n      control = '';\n    }\n\n    if (input instanceof Stream) {\n      return this.parse(input);\n    } else {\n      return this.parse(new Stream(toArray(input), toArray(control)));\n    }\n  }; // map :: Functor f => f a ~> (a -> b) -> f b\n\n\n  Parser.prototype.map = function (f) {\n    var _this = this;\n\n    return new Parser(function (stream) {\n      return _this.parse(stream).map(f);\n    });\n  }; // chain :: Chain m => m a ~> (a -> m b) -> m b\n\n\n  Parser.prototype.chain = function (f) {\n    var _this = this;\n\n    return new Parser(function (stream) {\n      return _this.parse(stream).chain(function (v, s) {\n        return f(v).run(s);\n      });\n    });\n  };\n\n  Parser.prototype.isLiteral = function (c) {\n    return this.run(c).type === ResultType.Literal;\n  };\n\n  return Parser;\n}();\n\nexport { Parser };\n/**\n * @hidden\n */\n\nexport var mask = function mask(_a) {\n  var prompt = _a.prompt,\n      promptPlaceholder = _a.promptPlaceholder;\n  return function (rule) {\n    return new Parser(function (stream) {\n      while (!stream.eof()) {\n        var _a = stream.peek(),\n            char = _a.char,\n            control = _a.control;\n\n        if (char === control && control === prompt) {\n          stream.eat();\n          return new Result(prompt, stream, ResultType.Mask);\n        }\n\n        if (rule.test(char)) {\n          stream.eat();\n          return new Result(char, stream, ResultType.Mask);\n        }\n\n        if (char === promptPlaceholder) {\n          stream.eat();\n          return new Result(prompt, stream, ResultType.Mask);\n        }\n\n        stream.eat_input();\n      }\n\n      stream.eat();\n      return new Result(prompt, stream, ResultType.Mask);\n    });\n  };\n};\n/**\n * @hidden\n */\n\nexport var literal = function literal(_token) {\n  return new Parser(function (stream) {\n    //    let {char, control} = stream.peek();\n    var char = stream.peek().char;\n\n    if (char === _token) {\n      stream.eat();\n      return new Result(_token, stream, ResultType.Literal);\n    } //    if (control === _token) {\n    //        while (!stream.eof() && char !== _token) {\n    //            stream.eat_input();\n    //            char = stream.peek().char;\n    //        }\n    //    }\n    //\n    //    if (control !== undefined) {\n    //        stream.eat();\n    //    }\n\n\n    return new Result(_token, stream, ResultType.Literal);\n  });\n};\n/**\n * @hidden\n */\n\nexport var unmask = function unmask(prompt) {\n  return function (rule) {\n    return new Parser(function (stream) {\n      while (!stream.eof()) {\n        var _a = stream.peek(),\n            char = _a.char,\n            control = _a.control;\n\n        if (char === prompt && control === prompt) {\n          stream.eat();\n          return new Result(char, stream);\n        }\n\n        if (rule.test(char)) {\n          stream.eat();\n          return new Result(char, stream);\n        }\n\n        stream.eat_input();\n      }\n\n      stream.eat();\n      return new Result('', stream);\n    });\n  };\n};\n/**\n * @hidden\n */\n\nexport var unliteral = function unliteral(_token) {\n  return new Parser(function (stream) {\n    if (stream.eof()) {\n      return new Result('', stream);\n    }\n\n    var char = stream.peek().char;\n\n    if (char === _token) {\n      stream.eat();\n    }\n\n    return new Result(_token, stream);\n  });\n};\n/**\n * @hidden\n */\n\nexport var token = function token(rules, creator) {\n  return new Parser(function (stream) {\n    var char = stream.next().char;\n    var rule = rules[char];\n\n    if (char === ESCAPE_CHARACTER) {\n      char = stream.next().char;\n      return new Result(creator.literal(char), stream);\n    }\n\n    if (!rule) {\n      return new Result(creator.literal(char), stream);\n    }\n\n    return new Result(creator.mask(rule), stream);\n  });\n};\n/**\n * @hidden\n */\n\nexport var rawMask = function rawMask(_a) {\n  var prompt = _a.prompt,\n      promptPlaceholder = _a.promptPlaceholder;\n  return new Parser(function (stream) {\n    var char = stream.next().char;\n\n    if (char === prompt) {\n      return new Result(promptPlaceholder, stream);\n    }\n\n    return new Result(char, stream);\n  });\n};\n/**\n * @hidden\n */\n\nexport var rawLiteral = function rawLiteral(includeLiterals) {\n  return new Parser(function (stream) {\n    var char = stream.next().char;\n\n    if (includeLiterals) {\n      return new Result(char, stream);\n    }\n\n    return new Result('', stream);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}