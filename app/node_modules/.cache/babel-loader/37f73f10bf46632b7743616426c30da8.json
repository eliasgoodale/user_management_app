{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport * as React from 'react';\nimport { GridFilterCell } from '../cells/GridFilterCell';\n/**\n *\n * @hidden\n */\n\nvar FilterRow =\n/** @class */\nfunction (_super) {\n  __extends(FilterRow, _super);\n\n  function FilterRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FilterRow.prototype.headerCellClassName = function (field) {\n    if (this.props.sort && this.props.sort.filter(function (descriptor) {\n      return descriptor.field === field;\n    }).length > 0) {\n      return 'k-sorted';\n    }\n\n    return '';\n  };\n\n  FilterRow.prototype.setFilter = function (value, operator, field, e) {\n    if (!this.props.filterChange) {\n      return;\n    }\n\n    var filters = [];\n\n    if (value !== '' && value !== null || operator !== '') {\n      filters.push({\n        field: field,\n        operator: operator,\n        value: value\n      });\n    }\n\n    if (this.props.filter && this.props.filter.filters) {\n      var oldFilters = this.props.filter.filters || [];\n      oldFilters.forEach(function (filter) {\n        var descriptor = filter;\n\n        if (descriptor && descriptor.field !== field) {\n          filters.push(descriptor);\n        }\n      });\n    }\n\n    this.props.filterChange(filters.length > 0 ? {\n      logic: 'and',\n      filters: filters\n    } : null, e);\n  };\n\n  FilterRow.prototype.render = function () {\n    var _this = this;\n\n    var oldFilters = this.props.filter && this.props.filter.filters || [];\n\n    var activeFilterValueFor = function activeFilterValueFor(field, defaultValue) {\n      if (defaultValue === void 0) {\n        defaultValue = null;\n      }\n\n      var found = oldFilters.filter(function (filter) {\n        return filter.field === field;\n      })[0];\n      return found ? found.value : defaultValue;\n    };\n\n    var activeOperatorFor = function activeOperatorFor(field) {\n      var found = oldFilters.filter(function (filter) {\n        return filter.field === field;\n      })[0];\n      return found ? found.operator : null;\n    };\n\n    var filterCells = this.props.columns.filter(function (c) {\n      return c.children.length === 0;\n    }).map(function (column, index) {\n      var filterType = column.filter === undefined ? 'text' : column.filter;\n      var filterCellProps = column.filterable && {\n        render: _this.props.cellRender,\n        field: column.field,\n        value: activeFilterValueFor(column.field, filterType === 'text' ? '' : null),\n        operator: activeOperatorFor(column.field),\n        filterType: filterType,\n        onChange: function onChange(e) {\n          _this.setFilter(e.value, e.operator, column.field, e.syntheticEvent);\n        }\n      };\n      return React.createElement(\"th\", {\n        key: index,\n        className: _this.headerCellClassName(column.field)\n      }, filterCellProps && (column.filterCell ? React.createElement(column.filterCell, __assign({}, filterCellProps)) : React.createElement(GridFilterCell, __assign({}, filterCellProps))));\n    });\n    return React.createElement(\"tr\", {\n      className: \"k-filter-row\"\n    }, filterCells);\n  };\n\n  return FilterRow;\n}(React.Component);\n\nexport { FilterRow };","map":null,"metadata":{},"sourceType":"module"}