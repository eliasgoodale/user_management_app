{"ast":null,"code":"import { isPresent, isBlank } from '../utils';\nimport { getter } from '../accessor';\n\nvar compare = function compare(a, b) {\n  if (isBlank(a)) {\n    return a === b ? 0 : -1;\n  }\n\n  if (isBlank(b)) {\n    return 1;\n  }\n\n  if (a.localeCompare) {\n    return a.localeCompare(b);\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\nvar compareDesc = function compareDesc(a, b) {\n  return compare(b, a);\n};\n\nvar descriptorAsFunc = function descriptorAsFunc(descriptor) {\n  var prop = getter(descriptor.field, true);\n  return function (a, b) {\n    return (descriptor.dir === 'asc' ? compare : compareDesc)(prop(a), prop(b));\n  };\n};\n\nvar initial = function initial(_a, _b) {\n  return 0;\n};\n/**\n * Converts the `SortDescriptors` into a [`Comparer`]({% slug api_kendo-data-query_comparer %})\n * function that can be used through `Array.sort`.\n *\n * If multiple descriptors are provided, sorting is applied in a right-to-left order.\n * @param {SortDescriptor[]} descriptors - The descriptors which will be converted.\n * @returns {Comparer} - The produced function.\n *\n * @example\n * ```ts-no-run\n * import { composeSortDescriptors } from '@progress/kendo-data-query';\n *\n * const data = [{ name: \"Pork\" }, { name: \"Pepper\" }, { name: \"Beef\" } ];\n * const comparer = composeSortDescriptors([{ field: \"name\", dir: \"asc\" }]);\n * const result = data.sort(comparer);\n * // output: [{ name: \"Beef\" }, { name: \"Pepper\" }, { name: \"Pork\" }];\n * ```\n */\n\n\nexport var composeSortDescriptors = function composeSortDescriptors(descriptors) {\n  return descriptors.filter(function (x) {\n    return isPresent(x.dir);\n  }).map(function (descriptor) {\n    return descriptorAsFunc(descriptor);\n  }).reduce(function (acc, curr) {\n    return function (a, b) {\n      return acc(a, b) || curr(a, b);\n    };\n  }, initial);\n};","map":null,"metadata":{},"sourceType":"module"}