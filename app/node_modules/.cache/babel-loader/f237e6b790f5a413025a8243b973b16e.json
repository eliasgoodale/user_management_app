{"ast":null,"code":"import { isPresent, isNumeric, isDate } from './utils';\nimport { getter } from './accessor';\n\nvar valueToString = function valueToString(value) {\n  value = isPresent(value) && value.getTime ? value.getTime() : value;\n  return value + \"\";\n};\n/**\n * @hidden\n */\n\n\nexport var groupCombinator = function groupCombinator(field) {\n  var prop = getter(field, true);\n  var position = 0;\n  return function (agg, value) {\n    agg[field] = agg[field] || {};\n    var groupValue = prop(value);\n    var key = valueToString(groupValue);\n    var values = agg[field][key] || {\n      __position: position++,\n      aggregates: {},\n      items: [],\n      value: groupValue\n    };\n    values.items.push(value);\n    agg[field][key] = values;\n    return agg;\n  };\n};\n/**\n * @hidden\n */\n\nexport var expandAggregates = function expandAggregates(result) {\n  if (result === void 0) {\n    result = {};\n  }\n\n  Object.keys(result).forEach(function (field) {\n    var aggregates = result[field];\n    Object.keys(aggregates).forEach(function (aggregate) {\n      aggregates[aggregate] = aggregates[aggregate].result();\n    });\n  });\n  return result;\n};\n\nvar aggregatesFuncs = function aggregatesFuncs(name) {\n  return {\n    average: function average() {\n      var value = 0;\n      var count = 0;\n      return {\n        calc: function calc(curr) {\n          if (isNumeric(curr)) {\n            value += curr;\n            count++;\n          } else {\n            value = curr;\n          }\n        },\n        result: function result() {\n          return isNumeric(value) ? value / count : value;\n        }\n      };\n    },\n    count: function count() {\n      var state = 0;\n      return {\n        calc: function calc() {\n          return state++;\n        },\n        result: function result() {\n          return state;\n        }\n      };\n    },\n    max: function max() {\n      var state = Number.NEGATIVE_INFINITY;\n      return {\n        calc: function calc(value) {\n          state = isNumeric(state) || isDate(state) ? state : value;\n\n          if (state < value && (isNumeric(value) || isDate(value))) {\n            state = value;\n          }\n        },\n        result: function result() {\n          return state;\n        }\n      };\n    },\n    min: function min() {\n      var state = Number.POSITIVE_INFINITY;\n      return {\n        calc: function calc(value) {\n          state = isNumeric(state) || isDate(state) ? state : value;\n\n          if (state > value && (isNumeric(value) || isDate(value))) {\n            state = value;\n          }\n        },\n        result: function result() {\n          return state;\n        }\n      };\n    },\n    sum: function sum() {\n      var state = 0;\n      return {\n        calc: function calc(value) {\n          return state += value;\n        },\n        result: function result() {\n          return state;\n        }\n      };\n    }\n  }[name]();\n};\n/**\n * @hidden\n */\n\n\nexport var aggregatesCombinator = function aggregatesCombinator(descriptors) {\n  var functions = descriptors.map(function (descriptor) {\n    var fieldAccessor = getter(descriptor.field, true);\n    var aggregateName = (descriptor.aggregate || \"\").toLowerCase();\n    var aggregateAccessor = getter(aggregateName, true);\n    return function (state, value) {\n      var fieldAggregates = state[descriptor.field] || {};\n      var aggregateFunction = aggregateAccessor(fieldAggregates) || aggregatesFuncs(aggregateName);\n      aggregateFunction.calc(fieldAccessor(value));\n      fieldAggregates[descriptor.aggregate] = aggregateFunction;\n      state[descriptor.field] = fieldAggregates;\n      return state;\n    };\n  });\n  return function (state, value) {\n    return functions.reduce(function (agg, calc) {\n      return calc(agg, value);\n    }, state);\n  };\n};\n/**\n * @hidden\n * Adds the value to the `arr` and produces a new array.\n *\n * > The original array will be modified.\n */\n\nexport var concat = function concat(arr, value) {\n  arr.push(value);\n  return arr;\n};\n/**\n * @hidden\n * Returns a reducer that will apply the specified transformation to the value.\n */\n\nexport var map = function map(transform) {\n  return function (reduce) {\n    return function (acc, curr, index) {\n      return reduce(acc, transform(curr, index));\n    };\n  };\n};\n/**\n * @hidden\n * Returns a reducer that will filter out items which do not match the `Predicate`.\n */\n\nexport var filter = function filter(predicate) {\n  return function (reduce) {\n    return function (acc, curr) {\n      return predicate(curr) ? reduce(acc, curr) : acc;\n    };\n  };\n};\n/**\n * @hidden\n */\n\nexport var isTransformerResult = function isTransformerResult(source) {\n  return isPresent(source.__value);\n};\n\nvar reduced = function reduced(x) {\n  if (isTransformerResult(x)) {\n    return x;\n  }\n\n  return {\n    __value: x,\n    reduced: true\n  };\n};\n/**\n * @hidden\n * Returns a reducer that will take the specified number of items.\n */\n\n\nexport var take = function take(count) {\n  return function (reduce) {\n    return function (acc, curr) {\n      return count-- > 0 ? reduce(acc, curr) : reduced(acc);\n    };\n  };\n};\n/**\n * @hidden\n * Returns a reducer that will take the specified number of items.\n */\n\nexport var takeWhile = function takeWhile(predicate) {\n  return function (reduce) {\n    return function (acc, curr) {\n      return predicate(curr) ? reduce(acc, curr) : reduced(acc);\n    };\n  };\n};\n/**\n * @hidden\n * Returns a reducer that will skip the specified number of items.\n */\n\nexport var skip = function skip(count) {\n  return function (reduce) {\n    return function (acc, curr) {\n      return count-- <= 0 ? reduce(acc, curr) : acc;\n    };\n  };\n};\n/**\n * @hidden\n * Transforms the data by applying the supplied transformer.\n */\n\nexport var exec = function exec(transform, initialValue, data) {\n  var result = initialValue;\n\n  for (var idx = 0, length_1 = data.length; idx < length_1; idx++) {\n    result = transform(result, data[idx], idx);\n\n    if (isTransformerResult(result)) {\n      result = result.__value;\n      break;\n    }\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}