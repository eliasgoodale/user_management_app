{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport { getNestedValue } from './../utils';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\nimport { DatePicker } from '@progress/kendo-react-dateinputs';\nimport { guid } from '@progress/kendo-react-common';\n/**\n * @hidden\n */\n\nvar GridEditCell =\n/** @class */\nfunction (_super) {\n  __extends(GridEditCell, _super);\n\n  function GridEditCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._inputId = guid();\n    /**\n     * @hidden\n     */\n\n    _this.handleOnChange = function (syntheticEvent) {\n      if (_this.props.onChange) {\n        var value = syntheticEvent.target.type === 'checkbox' ? syntheticEvent.target.checked : syntheticEvent.target.value;\n\n        _this.props.onChange({\n          dataItem: _this.props.dataItem,\n          field: _this.props.field,\n          syntheticEvent: syntheticEvent,\n          value: value\n        });\n      }\n    };\n    /**\n     * @hidden\n     */\n\n\n    _this.inputChange = function (e) {\n      if (_this.props.onChange) {\n        _this.props.onChange({\n          dataItem: _this.props.dataItem,\n          field: _this.props.field,\n          syntheticEvent: e.syntheticEvent,\n          value: e.value\n        });\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  GridEditCell.prototype.render = function () {\n    var data = getNestedValue(this.props.field, this.props.dataItem);\n    var defaultRendering = null;\n\n    switch (this.props.editor) {\n      case 'numeric':\n        defaultRendering = React.createElement(\"td\", {\n          className: this.props.className\n        }, React.createElement(NumericTextBox, {\n          width: \"100%\",\n          value: data === undefined ? null : data,\n          onChange: this.inputChange\n        }));\n        break;\n\n      case 'date':\n        defaultRendering = React.createElement(\"td\", {\n          className: this.props.className\n        }, React.createElement(DatePicker, {\n          width: \"100%\",\n          value: data,\n          onChange: this.inputChange\n        }));\n        break;\n\n      case 'boolean':\n        defaultRendering = React.createElement(\"td\", {\n          className: this.props.className\n        }, React.createElement(\"input\", {\n          checked: data || false,\n          id: this._inputId,\n          type: \"checkbox\",\n          className: \"k-checkbox\",\n          onChange: this.handleOnChange\n        }), React.createElement(\"label\", {\n          className: \"k-checkbox-label\",\n          htmlFor: this._inputId\n        }));\n        break;\n\n      default:\n        defaultRendering = React.createElement(\"td\", {\n          className: this.props.className\n        }, React.createElement(\"input\", {\n          style: {\n            width: '100%'\n          },\n          className: \"k-textbox\",\n          value: data || '',\n          onChange: this.handleOnChange\n        }));\n    }\n\n    return this.props.render ? this.props.render.call(undefined, defaultRendering, this.props) : defaultRendering;\n  };\n\n  return GridEditCell;\n}(React.Component);\n\nexport { GridEditCell };","map":null,"metadata":{},"sourceType":"module"}