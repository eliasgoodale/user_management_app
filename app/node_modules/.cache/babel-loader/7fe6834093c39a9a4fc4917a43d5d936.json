{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { registerForIntl, provideIntlService, registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';\nimport { guid, classNames, FloatingLabel, dispatchEvent } from '@progress/kendo-react-common';\nimport { messages, increaseValue, decreaseValue } from './../messages';\nvar VALIDATION_MESSAGE = 'Please enter a valid value!';\n\nvar NumericTextBox =\n/** @class */\nfunction (_super) {\n  __extends(NumericTextBox, _super);\n\n  function NumericTextBox(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.valueDuringOnChange = undefined;\n    _this.textBeforeInput = '';\n    _this._inputId = guid();\n\n    _this.setValidity = function () {\n      if (_this.element && _this.element.setCustomValidity) {\n        _this.element.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || VALIDATION_MESSAGE);\n      }\n    };\n\n    _this.elementChange = _this.elementChange.bind(_this);\n    _this.increase = _this.increase.bind(_this);\n    _this.decrease = _this.decrease.bind(_this);\n    _this.wheel = _this.wheel.bind(_this);\n    _this.keyDown = _this.keyDown.bind(_this);\n    var initialState = {\n      value: null,\n      looselyFormattedText: null,\n      selectionStart: 0,\n      selectionEnd: 0,\n      decimalSelect: false\n    };\n\n    if (_this.props.value !== undefined) {\n      initialState.value = _this.props.value;\n    } else if (_this.props.defaultValue !== undefined) {\n      initialState.value = _this.props.defaultValue;\n    }\n\n    _this.state = initialState;\n    return _this;\n  }\n\n  Object.defineProperty(NumericTextBox.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the NumericTextBox.\n     */\n    get: function get() {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumericTextBox.prototype, \"value\", {\n    /**\n     * Gets the value of the NumericTextBox.\n     */\n    get: function get() {\n      if (this.valueDuringOnChange !== undefined) {\n        return this.valueDuringOnChange;\n      } else {\n        return this.state.value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumericTextBox.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the NumericTextBox is set.\n     */\n    get: function get() {\n      // The NumericTextBox currently autocorrect its' value,\n      // so the only invalid state is if it's required and\n      // the value is null!\n      var customError = this.props.validationMessage !== undefined;\n      var isValid = !this.required || this.value !== null;\n      var valid = this.props.valid !== undefined ? this.props.valid : isValid;\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: this.value === null\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumericTextBox.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : NumericTextBox.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumericTextBox.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      return this.props.required !== undefined ? this.props.required : NumericTextBox.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumericTextBox.prototype, \"element\", {\n    /**\n     * Gets the element of the NumericTextBox.\n     *\n     * @return - An `HTMLInputElement`.\n     *\n     * @example\n     * ```jsx\n     * class App extends React.Component {\n     *     constructor(props) {\n     *         super(props);\n     *     }\n     *     element = null;\n     *     render() {\n     *         return (\n     *             <div>\n     *                 <NumericTextBox\n     *                     ref={(numericTextBox) =>\n     *                         this.element = numericTextBox ? numericTextBox.element : null}\n     *                 />\n     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>\n     *             </div>\n     *         );\n     *     }\n     * }\n     *\n     * ReactDOM.render(\n     *     <App />,\n     *     document.getElementsByTagName('my-app')[0]\n     * );\n     * ```\n     */\n    get: function get() {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  NumericTextBox.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.value !== undefined && this.state.value !== nextProps.value) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  NumericTextBox.prototype.componentDidMount = function () {\n    if (this.element) {\n      this.textBeforeInput = this.element.value;\n    }\n\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  NumericTextBox.prototype.componentDidUpdate = function (_, prevState) {\n    if (!(document && document.activeElement !== this.element || !this.element) && this.state.looselyFormattedText !== null) {\n      // An IE related issue.\n      // When having multiple inputs and if selection is applied, the caret moves to the latest changed input.\n      // So, skip the application of the selection if the input is not focused.\n      if (this.element.value !== this.state.looselyFormattedText && this.state.value === prevState.value) {\n        // culture is changed, typing was not valid or was ranged.\n        this.element.selectionStart = this.state.selectionStart;\n        this.element.selectionEnd = this.state.selectionEnd;\n      } else {\n        var position = void 0;\n        var indexOfDecimal = this.state.looselyFormattedText.indexOf(this.symbols.decimal);\n\n        if (indexOfDecimal >= 0 && indexOfDecimal < this.state.selectionStart) {\n          position = this.state.selectionEnd;\n        } else {\n          position = this.state.selectionEnd - (this.state.looselyFormattedText.length - this.element.value.length);\n        }\n\n        var indexOfNewDecimal = this.element.value.indexOf(this.symbols.decimal);\n\n        if (this.state.decimalSelect || this.state.value === null && indexOfNewDecimal >= 0 || indexOfDecimal === -1 && indexOfNewDecimal >= 0) {\n          if (this.state.selectionStart < indexOfNewDecimal + 2 && indexOfDecimal >= 0) {\n            position = indexOfNewDecimal + 1;\n          } else {\n            position = indexOfNewDecimal;\n          }\n        }\n\n        if (!this.state.decimalSelect && this.state.value === prevState.value) {\n          position = this.state.selectionEnd - (this.state.looselyFormattedText.length - this.element.value.length);\n        }\n\n        this.element.selectionStart = this.element.selectionEnd = position;\n      }\n    }\n\n    if (this.element) {\n      this.textBeforeInput = this.element.value;\n    }\n\n    this.setValidity();\n  };\n\n  Object.defineProperty(NumericTextBox.prototype, \"valueAsLocalString\", {\n    /**\n     * @hidden\n     */\n    get: function get() {\n      this.intl = provideIntlService(this);\n      this.symbols = this.intl.numberSymbols();\n\n      if (this.state.looselyFormattedText !== null && !this.state.decimalSelect && this.parseNumber(this.state.looselyFormattedText) === this.state.value && this.formatNumber(this.state.value).length < this.state.looselyFormattedText.length && this.state.looselyFormattedText.indexOf(this.formatNumber(this.state.value)) === 0) {\n        // the user is currently typing, do not interrupt them\n        return this.state.looselyFormattedText;\n      }\n\n      return this.formatNumber(this.state.value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  NumericTextBox.prototype.render = function () {\n    var _this = this;\n\n    var inputId = this.props.id || this._inputId;\n    var localizationService = provideLocalizationService(this);\n    var isValid = !this.validityStyles || this.validity.valid;\n    var numerictextbox = React.createElement(\"span\", {\n      dir: this.props.dir,\n      style: !this.props.label ? {\n        width: this.props.width\n      } : undefined,\n      className: \"k-widget k-numerictextbox\"\n    }, React.createElement(\"span\", {\n      className: classNames('k-numeric-wrap', {\n        'k-state-disabled': this.props.disabled,\n        'k-state-invalid': !isValid\n      }),\n      ref: function ref(elementWrapper) {\n        _this.elementWrapper = elementWrapper;\n      }\n    }, React.createElement(\"input\", {\n      tabIndex: this.props.tabIndex,\n      disabled: this.props.disabled,\n      title: this.props.title,\n      \"aria-valuemin\": this.props.min,\n      \"aria-valuemax\": this.props.max,\n      placeholder: this.props.placeholder,\n      type: \"tel\",\n      spellCheck: false,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      className: \"k-input k-formatted-value\",\n      id: inputId,\n      value: this.valueAsLocalString,\n      \"aria-valuenow\": this.state.value !== null ? this.state.value : undefined,\n      name: this.props.name,\n      onWheel: this.wheel,\n      onKeyDown: this.keyDown,\n      onChange: this.elementChange,\n      ref: function ref(input) {\n        return _this._element = input;\n      }\n    }), this.props.children, this.props.spinners && React.createElement(\"span\", {\n      className: \"k-select\",\n      onMouseDown: function onMouseDown(e) {\n        if (document && _this._element) {\n          e.preventDefault();\n\n          if (document.activeElement !== _this._element) {\n            _this._element.focus();\n          }\n        }\n      }\n    }, React.createElement(\"span\", {\n      className: \"k-link k-link-increase\",\n      \"aria-label\": localizationService.toLanguageString(increaseValue, messages[increaseValue]),\n      title: localizationService.toLanguageString(increaseValue, messages[increaseValue]),\n      onClick: this.increase\n    }, React.createElement(\"span\", {\n      className: \"k-icon k-i-arrow-n\"\n    })), React.createElement(\"span\", {\n      className: \"k-link k-link-decrease\",\n      \"aria-label\": localizationService.toLanguageString(decreaseValue, messages[decreaseValue]),\n      title: localizationService.toLanguageString(decreaseValue, messages[decreaseValue]),\n      onClick: this.decrease\n    }, React.createElement(\"span\", {\n      className: \"k-icon k-i-arrow-s\"\n    })))));\n    return this.props.label ? React.createElement(FloatingLabel, {\n      id: inputId,\n      value: this.valueAsLocalString,\n      valid: isValid,\n      placeholder: this.props.placeholder,\n      label: this.props.label,\n      children: numerictextbox,\n      style: {\n        width: this.props.width\n      }\n    }) : numerictextbox;\n  };\n\n  NumericTextBox.prototype.formatNumber = function (value) {\n    if (value == null) {\n      return '';\n    }\n\n    return this.intl.formatNumber(value, this.props.format).toString(); // the second argument actually supports null/undefined\n  };\n\n  NumericTextBox.prototype.parseNumber = function (text) {\n    return this.intl.parseNumber(text, this.props.format);\n  };\n\n  NumericTextBox.prototype.elementChange = function (event) {\n    if (!this.element) {\n      return;\n    }\n\n    var element = this.element;\n    var newState = {\n      value: this.state.value,\n      looselyFormattedText: element.value,\n      selectionStart: this.element.selectionStart,\n      selectionEnd: this.element.selectionEnd,\n      decimalSelect: false\n    };\n    var text = element.value; // do NOT use 'event.target.value', always use 'element.value'\n\n    var minusSign = this.symbols.minusSign;\n\n    if (text === minusSign) {\n      newState.value = null;\n      this.triggerChange(newState, event);\n      return;\n    }\n\n    if (text.split(minusSign).length !== this.textBeforeInput.split(minusSign).length && text.length === this.textBeforeInput.length + minusSign.length) {\n      // positive/negative change\n      newState.value = -this.parseNumber(this.textBeforeInput);\n      this.triggerChange(newState, event);\n      return;\n    }\n\n    var decimal = this.symbols.decimal;\n\n    if (text.split(RegExp('\\\\' + decimal)).length > 2) {\n      // prevent typing second decimal separator\n      newState.decimalSelect = true;\n      this.triggerChange(newState, event);\n      return;\n    }\n\n    if (text.length > 1 && text.indexOf(decimal) === -1 && this.textBeforeInput.indexOf(decimal) >= 0 && text.length + decimal.length === this.textBeforeInput.length) {\n      // prevent deleting of decimal separator on its own\n      newState.decimalSelect = true;\n      this.triggerChange(newState, event);\n      return;\n    }\n\n    var value = this.parseNumber(text);\n\n    if (value === this.state.value && text.length > 0 && text[text.length - 1] === decimal) {\n      if ((this.formatNumber(1.1) || '').toString().indexOf(decimal) > -1) {\n        newState.looselyFormattedText = text;\n        this.triggerChange(newState, event);\n        return;\n      }\n    }\n\n    var invalid = (value === null || isNaN(value)) && text.length > 0 && text !== this.symbols.minusSign;\n    var wrapper = this.elementWrapper;\n\n    if (text.length > this.textBeforeInput.length && this.parseNumber(text) === this.parseNumber(text.slice(0, element.selectionStart)) && (this.parseNumber(text.slice(element.selectionStart - 1)) === null || isNaN(this.parseNumber(text.slice(element.selectionStart - 1))))) {\n      invalid = true;\n    }\n\n    if (invalid) {\n      // block typing of invalid characters\n      if (wrapper && wrapper.className.indexOf(\"k-state-invalid\") === -1) {\n        wrapper.className += ' k-state-invalid';\n        setTimeout(function () {\n          wrapper.className = wrapper.className.replace(' k-state-invalid', '');\n        }, 50);\n      }\n\n      newState.looselyFormattedText = this.textBeforeInput;\n      newState.selectionStart = newState.selectionEnd = element.selectionEnd + this.textBeforeInput.length - element.value.length;\n      this.triggerChange(newState, event);\n      return;\n    }\n\n    newState.value = value;\n    this.triggerChange(newState, event);\n  };\n\n  NumericTextBox.prototype.nonInputActions = function (value, event) {\n    var newState = {\n      value: value,\n      looselyFormattedText: null,\n      selectionStart: 0,\n      selectionEnd: 0,\n      decimalSelect: false\n    };\n    this.triggerChange(newState, event);\n  };\n\n  NumericTextBox.prototype.triggerChange = function (newState, event) {\n    if (this.props.disabled) {\n      return;\n    } // decimals ranging based on the format:\n\n\n    this.valueDuringOnChange = this.ranged(this.parseNumber(this.formatNumber(this.ranged(newState.value)))); // const value = newState.value;\n\n    var shouldFireEvent = this.valueDuringOnChange !== this.state.value;\n\n    if (this.props.value !== undefined) {\n      // controlled\n      newState.value = this.props.value;\n    } else {\n      // uncontrolled\n      newState.value = this.valueDuringOnChange;\n    }\n\n    this.setState(newState);\n\n    if (shouldFireEvent) {\n      dispatchEvent(this.props.onChange, event, this, {\n        value: this.valueDuringOnChange\n      });\n    }\n\n    this.valueDuringOnChange = undefined;\n  };\n\n  NumericTextBox.prototype.ranged = function (value) {\n    if (value == null) {\n      return value;\n    }\n\n    if (!(value > 1 || value < 1 || value === 1)) {\n      // null, undefined or NaN\n      return null;\n    }\n\n    if (this.props.max !== undefined && this.props.min !== undefined && this.props.max < this.props.min) {\n      return null;\n    } // TODO: This should be something improved like\n    // while (value < max) { value *= 10 }\n    // and the selection should be adjusted\n    // to get good experience when typing values in ranges like [222,11111]\n\n\n    if (this.props.max !== undefined && value > this.props.max) {\n      value = this.props.max;\n    }\n\n    if (this.props.min !== undefined && value < this.props.min) {\n      value = this.props.min;\n    }\n\n    return value;\n  };\n\n  NumericTextBox.prototype.increase = function (syntheticEvent) {\n    this.nonInputActions((this.state.value || 0) + (this.props.step || 0), syntheticEvent);\n  };\n\n  NumericTextBox.prototype.decrease = function (syntheticEvent) {\n    this.nonInputActions((this.state.value || 0) - (this.props.step || 0), syntheticEvent);\n  };\n\n  NumericTextBox.prototype.wheel = function (event) {\n    if (!document || document.activeElement !== this.element || !this.element) {\n      return;\n    }\n\n    if (event.nativeEvent.deltaY < 0) {\n      event.preventDefault();\n      this.increase(event);\n    }\n\n    if (event.nativeEvent.deltaY > 0) {\n      event.preventDefault();\n      this.decrease(event);\n    }\n  };\n\n  NumericTextBox.prototype.keyDown = function (event) {\n    switch (event.keyCode) {\n      case 38:\n        // arrow up\n        this.increase(event);\n        break;\n\n      case 40:\n        // arrow down\n        this.decrease(event);\n        break;\n\n      case 110:\n        // numpad decimal key\n        var element = this.element;\n\n        if (element) {\n          var text = element.value;\n          var selectionStart = element.selectionStart,\n              selectionEnd = element.selectionEnd;\n          element.value = text.slice(0, selectionStart) + this.symbols.decimal + text.slice(selectionEnd);\n          element.selectionStart = element.selectionEnd = selectionStart + 1;\n          this.elementChange(event); // TODO: remove this call (use triggerChange directly with custom state)\n        }\n\n        break;\n\n      default:\n        return;\n    }\n\n    event.preventDefault();\n  };\n  /**\n   * @hidden\n   */\n\n\n  NumericTextBox.propTypes = {\n    value: PropTypes.number,\n    defaultValue: PropTypes.number,\n    step: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n      style: PropTypes.oneOf(['decimal', 'currency', 'percent', 'scientific', 'accounting']),\n      currency: PropTypes.string,\n      currencyDisplay: PropTypes.oneOf(['symbol', 'code', 'name']),\n      useGrouping: PropTypes.bool,\n      minimumIntegerDigits: PropTypes.number,\n      minimumFractionDigits: PropTypes.number,\n      maximumFractionDigits: PropTypes.number\n    })]),\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    tabIndex: PropTypes.number,\n    title: PropTypes.string,\n    placeholder: PropTypes.string,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    spinners: PropTypes.bool,\n    disabled: PropTypes.bool,\n    dir: PropTypes.string,\n    name: PropTypes.string,\n    label: PropTypes.string,\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool,\n    id: PropTypes.string,\n    onChange: PropTypes.func\n  };\n  /**\n   * @hidden\n   */\n\n  NumericTextBox.defaultProps = {\n    spinners: true,\n    disabled: false,\n    onChange: function onChange(_) {\n      return;\n    },\n    step: 1,\n    required: false,\n    validityStyles: true // the rest of the properties are undefined by default\n\n  };\n  return NumericTextBox;\n}(React.Component);\n\nexport default NumericTextBox;\nregisterForIntl(NumericTextBox);\nregisterForLocalization(NumericTextBox);","map":null,"metadata":{},"sourceType":"module"}