{"ast":null,"code":"/**\n * @hidden\n */\nexport function getNestedValue(fieldName, dataItem) {\n  var path = (fieldName || '').split('.');\n  var data = dataItem;\n  path.forEach(function (p) {\n    data = data ? data[p] : undefined;\n  });\n  return data;\n}\n/**\n * @hidden\n */\n\nexport function flatData(output, input, footer, dataIndex, groupDefined, field, level) {\n  if (level === void 0) {\n    level = 0;\n  }\n\n  var maxLevel = level;\n\n  for (var i = 0; i < input.length; i++) {\n    if (!groupDefined || input[i].value === undefined || input[i].items === undefined) {\n      output[output.length] = {\n        dataIndex: ++dataIndex.index,\n        dataItem: input[i],\n        rowType: 'data',\n        level: level,\n        expanded: field === undefined || getNestedValue(field, input[i])\n      };\n      continue;\n    }\n\n    maxLevel = Math.max(maxLevel, level + 1);\n    var expanded = field === undefined || getNestedValue(field, input[i]) === undefined || getNestedValue(field, input[i]); // header\n\n    output[output.length] = {\n      dataIndex: -1,\n      dataItem: input[i],\n      level: level,\n      rowType: 'groupHeader',\n      expanded: expanded\n    }; // children\n\n    if (expanded) {\n      maxLevel = Math.max(flatData(output, input[i].items, footer, dataIndex, groupDefined, field, level + 1), maxLevel);\n    } // footer\n\n\n    if (footer === 'always' || expanded && footer === 'visible') {\n      output[output.length] = {\n        dataIndex: -1,\n        dataItem: input[i],\n        rowType: 'groupFooter',\n        level: level,\n        expanded: expanded\n      };\n    }\n  }\n\n  return maxLevel;\n}\n/**\n * @hidden\n */\n\nexport function getIndex(event, parent) {\n  if (!parent || !event || !event.originalEvent) {\n    return -1;\n  }\n\n  var target = document.elementFromPoint(event.clientX, event.originalEvent.clientY);\n\n  while (target && target.parentElement !== parent) {\n    target = target.parentElement;\n  }\n\n  var children = parent.children;\n\n  for (var i = 0; i < children.length; i++) {\n    if (children[i] === target) {\n      return i;\n    }\n  }\n\n  return -1;\n}\nvar eventKeys = ['sortChange', 'filterChange', 'groupChange', 'pageChange', 'expandChange', 'selectionChange', 'headerSelectionChange', 'rowClick', 'itemChange', 'dataStateChange', 'columnResize', 'columnReorder'];\n\nvar deprecatedHandlerMessage = function deprecatedHandlerMessage(oldKey, newKey) {\n  return \"The \" + oldKey + \" event handler property is deprecated, \" + (\"use https://www.telerik.com/kendo-react-ui/components/grid/api/GridProps/#toc-\" + newKey + \" instead\");\n};\n/**\n * @hidden\n */\n\n\nexport function checkPropCompatibility(props) {\n  for (var index = 0; index < eventKeys.length; index++) {\n    var eventKey = eventKeys[index];\n\n    if (props[eventKey] !== undefined) {\n      var newKey = 'on' + eventKey.charAt(0).toUpperCase() + eventKey.slice(1);\n      console.warn(deprecatedHandlerMessage(eventKey, newKey));\n    }\n  }\n}\n/**\n * @hidden\n */\n\nexport function mapColumns(columns) {\n  var columnsMap = [[]];\n\n  for (var q = columns.length - 1; q >= 0; q--) {\n    columns[q].colSpan = columns[q].colSpan || 1;\n\n    if (columns[q].parentIndex !== -1) {\n      columns[columns[q].parentIndex].colSpan = (columns[columns[q].parentIndex].colSpan || 0) + columns[q].colSpan;\n    }\n  }\n\n  var maxDepth = 0;\n  columns.forEach(function (d) {\n    maxDepth = Math.max(maxDepth, d.depth);\n  });\n  var rowSpan = 1;\n  columns.forEach(function (column, i) {\n    columnsMap[column.depth] = columnsMap[column.depth] || [];\n    var needKFirst = false;\n\n    if (columnsMap[column.depth].length === 0) {\n      if (rowSpan <= 1) {\n        rowSpan = 1 + (column.children.length > 0 ? 0 : maxDepth - column.depth);\n      } else {\n        rowSpan--;\n        needKFirst = true;\n      }\n    }\n\n    column.rowSpan = 1 + (column.children.length > 0 ? 0 : maxDepth - column.depth);\n    column.kFirst = needKFirst;\n    column.index = columnsMap[column.depth].length;\n    columnsMap[column.depth].push(i);\n  });\n  return columnsMap;\n}\nimport { GridColumn } from '../GridColumn';\n/**\n * @hidden\n */\n\nexport function readColumns(elements, oldColumns, depth) {\n  if (depth === void 0) {\n    depth = 0;\n  }\n\n  var columns = [];\n\n  if (!elements) {\n    return [];\n  }\n\n  if (elements && elements.length === undefined) {\n    elements = [elements];\n  }\n\n  elements.forEach(function (columnProps, index) {\n    columnProps = columnProps.props ? columnProps.props : columnProps;\n    var oldColumn = oldColumns[index] || null;\n    var c = readColumns(columnProps.children, oldColumn && oldColumn.children || [], depth + 1);\n    columns.push(Object.assign({\n      depth: depth\n    }, GridColumn.defaultProps, c.length ? {\n      cell: function cell() {\n        return null;\n      },\n      filterCell: function filterCell() {\n        return null;\n      }\n    } : {}, oldColumn ? {\n      width: oldColumn.width,\n      orderIndex: oldColumn.orderIndex\n    } : {}, columnProps, {\n      declarationIndex: columns.length,\n      children: c,\n      rowSpan: 0,\n      colSpan: 0\n    }));\n  });\n\n  var comparator = function comparator(a, b) {\n    return a.orderIndex === b.orderIndex ? a.declarationIndex - b.declarationIndex : (a.orderIndex || 0) - (b.orderIndex || 0);\n  };\n\n  columns.sort(comparator);\n\n  if (depth === 0) {\n    var ret_1 = [];\n\n    var flat_1 = function flat_1(cols, pIndex) {\n      return cols.forEach(function (c) {\n        c.parentIndex = pIndex;\n        flat_1(c.children, ret_1.push(c) - 1);\n      });\n    };\n\n    flat_1(columns, -1);\n    return ret_1;\n  }\n\n  return columns;\n}\n/**\n * @hidden\n */\n\nexport function autoGenerateColumns(data, group, expandField) {\n  var propData = [];\n\n  if (Array.isArray(data)) {\n    propData = data;\n  } else if (data) {\n    propData = data.data;\n  }\n\n  var columns = [];\n\n  if (propData.length > 0) {\n    var itemForColumnsGen = propData[0];\n\n    if (group) {\n      for (var i = 0; i < group.length; i++) {\n        itemForColumnsGen = itemForColumnsGen.items && itemForColumnsGen.items[0];\n      }\n    }\n\n    var fields = Object.getOwnPropertyNames(itemForColumnsGen);\n    fields.forEach(function (field) {\n      if (field !== expandField) {\n        columns.push(Object.assign({\n          declarationIndex: -1,\n          parentIndex: -1,\n          depth: 0,\n          colSpan: 0,\n          rowSpan: 0,\n          index: 0,\n          children: []\n        }, GridColumn.defaultProps, {\n          field: field\n        }));\n      }\n    });\n  }\n\n  return columns;\n}","map":null,"metadata":{},"sourceType":"module"}