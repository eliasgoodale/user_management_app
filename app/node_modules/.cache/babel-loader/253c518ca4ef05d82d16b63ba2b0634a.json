{"ast":null,"code":"/**\n * @hidden\n */\nexport var ifElse = function ifElse(predicate, right, left) {\n  return function (value) {\n    return predicate(value) ? right(value) : left(value);\n  };\n};\n/**\n * @hidden\n * Performs the right-to-left function composition. Functions should have a unary.\n */\n\nexport var compose = function compose() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return function (data) {\n    return args.reduceRight(function (acc, curr) {\n      return curr(acc);\n    }, data);\n  };\n};\n/**\n * @hidden\n */\n\nexport var constant = function constant(x) {\n  return function () {\n    return x;\n  };\n};\n/**\n * @hidden\n */\n\nexport var identity = function identity(x) {\n  return x;\n};","map":null,"metadata":{},"sourceType":"module"}