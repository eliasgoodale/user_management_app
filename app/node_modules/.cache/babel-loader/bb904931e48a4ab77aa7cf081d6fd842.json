{"ast":null,"code":"import { isPresent, isString } from './utils';\nimport { composeSortDescriptors } from './sorting/sort-array.operator';\nimport { groupBy, normalizeGroups } from './grouping/group.operators';\nimport { normalizeFilters } from './filtering/filter.operators';\nimport { compileFilter } from './filtering/filter-expression.factory';\nimport { exec, skip, take, filter, concat } from './transducers';\nimport { getter } from './accessor';\nimport { compose } from './funcs';\nimport { sort } from './sorting/sort';\n/**\n * Orders the specified array according to the provided sort descriptors.\n *\n * @param {T[]} data - The data to be sorted.\n * @param {SortDescriptor[]} descriptors - The descriptors by which the data will be sorted.\n * @returns {T[]} - The sorted data.\n *\n * @example\n * ```ts-no-run\n * import { orderBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *     { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = orderBy(data, [{ field: \"name\", dir: \"asc\" }]);\n * ```\n */\n\nexport var orderBy = function orderBy(data, descriptors) {\n  if (descriptors.some(function (x) {\n    return isPresent(x.dir);\n  })) {\n    data = data.slice(0);\n    var comparer = composeSortDescriptors(descriptors);\n    sort(data, 0, data.length, comparer);\n  }\n\n  return data;\n};\n\nvar defaultComparer = function defaultComparer(a, b) {\n  return a === b;\n};\n\nvar normalizeComparer = function normalizeComparer(comparer) {\n  if (isString(comparer)) {\n    var accessor_1 = getter(comparer);\n\n    comparer = function comparer(a, b) {\n      return accessor_1(a) === accessor_1(b);\n    };\n  }\n\n  return comparer;\n};\n\nvar _distinct = function _distinct(data, comparer) {\n  return data.filter(function (x, idx, xs) {\n    return xs.findIndex(comparer.bind(null, x)) === idx;\n  });\n};\n/**\n * Reduces the provided array so it contains only unique values.\n *\n * @param {T[]} data - The array that will be reduced.\n * @param {(Comparer | string)} comparer - An optional custom comparer function or the field name that will be used for comparison.\n * @returns {T[]} - The reduced data.\n *\n * @example\n * ```ts-no-run\n * import { distinct } from '@progress/kendo-data-query';\n *\n * const data = [\n *     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *     { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = distinct(data, \"subcategory\");\n *\n * // output:\n * // result => [\n * //     { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n * //     { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" }\n * // ];\n * ```\n */\n\n\nexport var distinct = function distinct(data, comparer) {\n  if (comparer === void 0) {\n    comparer = defaultComparer;\n  }\n\n  return _distinct(data, normalizeComparer(comparer));\n};\n/**\n * @hidden\n */\n\nexport var count = function count(data, predicate) {\n  var counter = 0;\n\n  for (var idx = 0, length_1 = data.length; idx < length_1; idx++) {\n    if (predicate(data[idx])) {\n      counter++;\n    }\n  }\n\n  return counter;\n};\n/**\n * @hidden\n */\n\nexport var limit = function limit(data, predicate) {\n  if (predicate) {\n    return data.filter(predicate);\n  }\n\n  return data;\n};\n/**\n * Applies the specified operation descriptors to the data.\n *\n * @param {T[]} data - The data to be processed.\n * @param {State} state - The operation descriptors that will be applied to the data.\n * @returns {DataResult} - The processed data.\n *\n * @example\n * ```ts-no-run\n *\n * const result = process(data, {\n *     skip: 10,\n *     take: 20,\n *     group: [{\n *       field: 'category.categoryName',\n *             aggregates: [\n *                   { aggregate: \"sum\", field: \"unitPrice\" },\n *                   { aggregate: \"sum\", field: \"unitsInStock\" }\n *             ]\n *       }],\n *     sort: [{ field: 'productName', dir: 'desc' }],\n *     filter: {\n *         logic: \"or\",\n *         filters: [\n *           { field: \"discontinued\", operator: \"eq\", value: true },\n *           { field: \"unitPrice\", operator: \"lt\", value: 22 }\n *         ]\n *     }\n * });\n *\n * ```\n */\n\nexport var process = function process(data, state) {\n  var skipCount = state.skip,\n      takeCount = state.take,\n      filterDescriptor = state.filter,\n      sort = state.sort,\n      group = state.group;\n  var sortDescriptors = normalizeGroups(group || []).concat(sort || []);\n\n  if (sortDescriptors.length) {\n    data = orderBy(data, sortDescriptors);\n  }\n\n  var hasFilters = isPresent(filterDescriptor) && filter.length;\n  var hasGroups = isPresent(group) && group.length;\n\n  if (!hasFilters && !hasGroups) {\n    return {\n      data: takeCount ? data.slice(skipCount, skipCount + takeCount) : data,\n      total: data.length\n    };\n  }\n\n  var total;\n  var transformers = [];\n  var predicate;\n\n  if (hasFilters) {\n    predicate = compileFilter(normalizeFilters(filterDescriptor));\n    total = count(data, predicate);\n    transformers.push(filter(predicate));\n  } else {\n    total = data.length;\n  }\n\n  if (isPresent(skipCount) && isPresent(takeCount)) {\n    transformers.push(skip(skipCount));\n    transformers.push(take(takeCount));\n  }\n\n  if (transformers.length) {\n    var transform = compose.apply(void 0, transformers);\n    var result = hasGroups ? groupBy(data, group, transform, limit(data, predicate)) : exec(transform(concat), [], data);\n    return {\n      data: result,\n      total: total\n    };\n  }\n\n  return {\n    data: hasGroups ? groupBy(data, group) : data,\n    total: total\n  };\n};","map":null,"metadata":{},"sourceType":"module"}